{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/config.coffee","theglow.js","src/crypto_storage.coffee","src/keyratchet.coffee","src/keyring.coffee","src/keys.coffee","src/mailbox.coffee","src/main.coffee","src/mixins.coffee","src/nacl.coffee","src/rachetbox.coffee","src/relay.coffee","src/test_driver.coffee","src/utils.coffee"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","Config","_NONCE_TAG","_SKEY_TAG","_DEF_ROOT","RELAY_TOKEN_LEN","RELAY_TOKEN_TIMEOUT","RELAY_SESSION_TIMEOUT","RELAY_COMMANDS","RELAY_AJAX_TIMEOUT",2,"CryptoStorage","Keys","Nacl","storage_key","this","root","_loadKey","newKey","prototype","tag","strKey","_saveKey","_set","toString","keyStr","_get","setKey","fromString","selfDestruct","overseerAuthorized","_local_remove","objStorageKey","makeSecretKey","save","strTag","data","aCText","nonce","use","encode_utf8","JSON","stringify","crypto_secretbox_random_nonce","crypto_secretbox","key","toBase64","get","aPText","ct","crypto_secretbox_open","fromBase64","parse","decode_utf8","remove","len","ref","_local_get","strData","_local_set","str","_storage","set","_storageDriver","startStorageSystem","driver","config","keys","nacl",3,"KeyRatchet","id","keyRing","firstKey","_roles","getKey","keyTag","startRatchet","last_key","conf_key","next_key","role","storeKey","saveKey","k","makeKeyPair","pushKey","results","push","confKey","confirmedKey","equal","curKey","h2_last_key","h2","boxPk","h2_conf_key","h2_next_key","keyByHash","hash","isNextKeyHash","toStr","fromStr","Utils","extend","window","__CRYPTO_DEBUG",4,"KeyRing","hasProp","hasOwnProperty","strMasterKey","storage","_ensureKeys","_loadCommKey","_loadGuestKeys","comm_key","j","registry","guest_keys","commFromSeed","seed","fromSeed","commFromSecKey","rawSecKey","fromSecretKey","tagByHpk","hpk","v","getMasterKey","key2str","getPubCommKey","strPubKey","_addRegistry","strGuestTag","indexOf","_saveNewGuest","pk","_removeGuestRecord","splice","addGuest","b64_pk","trimLines","addTempGuest","delay","_this","removeGuest","getGuestKey","getGuestRecord","g","rcopy","slice","crypto_storage","utils",5,"hashKeys","constructor","keys2str","strKeys","str2keys","strName","strSecKey","boxSk","objKey","strObj",6,"MailBox","identity","session_keys","session_relay","session_timeout","mbx","_hpk","fromSecKey","secKey","createSessionKey","sess_id","rawEncodeMessage","msg","pkTo","skFrom","_make_nonce","ctext","crypto_box","_parseData","rawDecodeMessage","pkFrom","skTo","NC","crypto_box_open","encodeMessage","guest","session","skTag","gpk","sk","_gPk","_getSecretKey","decodeMessage","connectToRelay","relay","openConnection","then","connectMailbox","lastRelay","sendToVia","relay_send","getRelayMessages","relay_messages","relay_count","count","parseInt","result","enc_msg","lastMsg","upload","download","emsg","lastDownload","from","relay_nonce_list","map","relay_delete","list","clean","_gKey","strId","_gHpk","type","time","bytes","Date","now","crypto_box_random_nonce","itoa","keyring",7,"Mixins","SimpleStorageDriver","Relay","RachetBox","storeImpl","setAjaxImpl","ajaxImpl","glow","mailbox","mixins","rachetbox","test_driver",8,"C","include","String","toCodeArray","charCodeAt","toUTF8","unescape","encodeURIComponent","fromUTF8","decodeURIComponent","escape","toUint8Array","Uint8Array","toUint8ArrayRaw","atob","replace","Array","Uint16Array","fromCharCodes","c","len1","fromCharCode","join","btoa","xorWith","a2","concat","anotherArray","tmp","byteLength","fill_with","val",9,"js_nacl","nacl_factory","HEAP_SIZE","Math","pow","_instance","_unloadTimer","clearTimeout","setTimeout","unload","__nacl_instance","instantiate","random_bytes","crypto_secretbox_KEYBYTES","random","size","crypto_box_keypair","raw_sk","crypto_box_keypair_from_raw_sk","crypto_box_keypair_from_seed","sha256","crypto_hash_sha256","to_hex","from_hex","h2_64","b64str","js-nacl","undefined",10,"Mailbox","RatchetBox","child","parent","ctor","__super__","superClass","apply","arguments","_loadRatchets","gHpk","kr_local","kr_guest","m","org_msg","got_key","_try_keypair","error","key_pairs","kp","console","log","ref1","ref2","ref3","sendNext","send_confs","fromTag","toTag","sc","shift","keyratchet",11,"bind","fn","me","item","url","_ajax","_reset_state","lastError","getServerToken","getServerKey","client_token","lines","_processData","relay_token","diff","h2_relay_token","_schedule_expire_session","handshake","sess_hs","h2_client_token","arrayZeroBits","d","relay_pk","relay_key","online","client_temp","h2_sign","inner","masked_client_temp_pk","outer","relay_id","sign","runCmd","cmd","params","message","_processResponse","datain","split","toHpk","payload","to","nonce_list","client_token_expiration","tout","ajax",12,"SimpleTestDriver","sourceData","_root_tag","_load","_state","_key_tag","localStorage","getItem","value","setItem","_persist","removeItem",13,"target","source","$","array","func","klass","mixin","obj","Object","Q","xhr","method","headers","Accept","Content-Type","responseType","timeout","disableUploadProgress","response","Deferred","dataType","context","contentType","milliseconds","floor","lg","pw","top","firstZeroBits","byte","arr","rmd","logStack","err","sl","stack"],"mappings":"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","file":"theglow.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Constants that define behavior for the glow library\nclass Config\n  @_NONCE_TAG:  '__nc'\n  @_SKEY_TAG:   'storage_key'\n  @_DEF_ROOT:   '.v1.stor.vlt12'\n\n  @RELAY_TOKEN_LEN: 32 # Relay tokens, keys and hashes are 32 bytes\n\n  # 1 min - Matched with config.x.relay.token_timeout\n  @RELAY_TOKEN_TIMEOUT: 60 * 1000\n\n  # 5 min - Matched with config.x.relay.session_timeout\n  @RELAY_SESSION_TIMEOUT: 5 * 60 * 1000\n\n  @RELAY_COMMANDS = ['count', 'upload', 'download', 'delete']\n\n  @RELAY_AJAX_TIMEOUT = 5 * 1000 # 5 seconds\n  # @RELAY_AJAX_TIMEOUT = 15 * 1000 # HIGH LATENCY\n\nmodule.exports = Config\n\n# Put all libs into global namespace for console access\n# window.__CRYPTO_DEBUG = true\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar Config;\n\nConfig = (function() {\n  function Config() {}\n\n  Config._NONCE_TAG = '__nc';\n\n  Config._SKEY_TAG = 'storage_key';\n\n  Config._DEF_ROOT = '.v1.stor.vlt12';\n\n  Config.RELAY_TOKEN_LEN = 32;\n\n  Config.RELAY_TOKEN_TIMEOUT = 60 * 1000;\n\n  Config.RELAY_SESSION_TIMEOUT = 5 * 60 * 1000;\n\n  Config.RELAY_COMMANDS = ['count', 'upload', 'download', 'delete'];\n\n  Config.RELAY_AJAX_TIMEOUT = 5 * 1000;\n\n  return Config;\n\n})();\n\nmodule.exports = Config;\n\n\n},{}],2:[function(require,module,exports){\nvar Config, CryptoStorage, Keys, Nacl;\n\nConfig = require('config');\n\nKeys = require('keys');\n\nNacl = require('nacl');\n\nCryptoStorage = (function() {\n  CryptoStorage.prototype.tag = function(strKey) {\n    return strKey && strKey + this.root;\n  };\n\n  function CryptoStorage(storage_key, r) {\n    this.storage_key = storage_key != null ? storage_key : null;\n    if (r == null) {\n      r = null;\n    }\n    this.root = r ? \".\" + r + Config._DEF_ROOT : Config._DEF_ROOT;\n    if (!this.storage_key) {\n      this._loadKey();\n    }\n    if (!this.storage_key) {\n      this.newKey();\n    }\n  }\n\n  CryptoStorage.prototype._saveKey = function() {\n    return this._set(Config._SKEY_TAG, this.storage_key.toString());\n  };\n\n  CryptoStorage.prototype._loadKey = function() {\n    var keyStr;\n    keyStr = this._get(Config._SKEY_TAG);\n    if (keyStr) {\n      return this.setKey(Keys.fromString(keyStr));\n    }\n  };\n\n  CryptoStorage.prototype.selfDestruct = function(overseerAuthorized) {\n    if (overseerAuthorized) {\n      return this._local_remove(this.tag(Config._SKEY_TAG));\n    }\n  };\n\n  CryptoStorage.prototype.setKey = function(objStorageKey) {\n    this.storage_key = objStorageKey;\n    return this._saveKey();\n  };\n\n  CryptoStorage.prototype.newKey = function() {\n    return this.setKey(Nacl.makeSecretKey());\n  };\n\n  CryptoStorage.prototype.save = function(strTag, data) {\n    var aCText, n, nonce;\n    if (!(strTag && data)) {\n      return null;\n    }\n    n = Nacl.use();\n    data = n.encode_utf8(JSON.stringify(data));\n    nonce = n.crypto_secretbox_random_nonce();\n    aCText = n.crypto_secretbox(data, nonce, this.storage_key.key);\n    this._set(strTag, aCText.toBase64());\n    this._set(Config._NONCE_TAG + \".\" + strTag, nonce.toBase64());\n    return true;\n  };\n\n  CryptoStorage.prototype.get = function(strTag) {\n    var aPText, ct, n, nonce;\n    ct = this._get(strTag);\n    if (!ct) {\n      return null;\n    }\n    nonce = this._get(Config._NONCE_TAG + \".\" + strTag);\n    if (!nonce) {\n      return null;\n    }\n    n = Nacl.use();\n    aPText = n.crypto_secretbox_open(ct.fromBase64(), nonce.fromBase64(), this.storage_key.key);\n    return JSON.parse(n.decode_utf8(aPText));\n  };\n\n  CryptoStorage.prototype.remove = function(strTag) {\n    var i, len, ref, tag;\n    ref = [strTag, Config._NONCE_TAG + \".\" + strTag];\n    for (i = 0, len = ref.length; i < len; i++) {\n      tag = ref[i];\n      this._local_remove(this.tag(tag));\n    }\n    return true;\n  };\n\n  CryptoStorage.prototype._get = function(strTag) {\n    return this._local_get(this.tag(strTag));\n  };\n\n  CryptoStorage.prototype._set = function(strTag, strData) {\n    if (!(strTag && strData)) {\n      return null;\n    }\n    this._local_set(this.tag(strTag), strData);\n    return strData;\n  };\n\n  CryptoStorage.prototype._local_get = function(str) {\n    return this._storage().get(str) || null;\n  };\n\n  CryptoStorage.prototype._local_set = function(str, data) {\n    return this._storage().set(str, data);\n  };\n\n  CryptoStorage.prototype._local_remove = function(str) {\n    return this._storage().remove(str);\n  };\n\n  CryptoStorage.prototype._storage = function() {\n    if (!CryptoStorage._storageDriver) {\n      CryptoStorage.startStorageSystem();\n    }\n    return CryptoStorage._storageDriver;\n  };\n\n  CryptoStorage._storageDriver = null;\n\n  CryptoStorage.startStorageSystem = function(driver) {\n    if (!driver) {\n      throw new Error('The driver parameter cannot be empty.');\n    }\n    return this._storageDriver = driver;\n  };\n\n  return CryptoStorage;\n\n})();\n\nmodule.exports = CryptoStorage;\n\n\n},{\"config\":1,\"keys\":5,\"nacl\":9}],3:[function(require,module,exports){\nvar KeyRatchet, Nacl;\n\nNacl = require('nacl');\n\nKeyRatchet = (function() {\n  KeyRatchet.prototype.last_key = null;\n\n  KeyRatchet.prototype.conf_key = null;\n\n  KeyRatchet.prototype.next_key = null;\n\n  KeyRatchet.prototype._roles = ['last_key', 'conf_key', 'next_key'];\n\n  function KeyRatchet(id, keyRing, firstKey) {\n    var i, len, ref, s;\n    this.id = id;\n    this.keyRing = keyRing;\n    if (firstKey == null) {\n      firstKey = null;\n    }\n    if (!(this.id && this.keyRing)) {\n      throw new Error('KeyRatchet - missing params');\n    }\n    ref = this._roles;\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      this[s] = this.keyRing.getKey(this.keyTag(s));\n    }\n    if (firstKey) {\n      this.startRatchet(firstKey);\n    }\n  }\n\n  KeyRatchet.prototype.keyTag = function(role) {\n    return role + \"_\" + this.id;\n  };\n\n  KeyRatchet.prototype.storeKey = function(role) {\n    return this.keyRing.saveKey(this.keyTag(role), this[role]);\n  };\n\n  KeyRatchet.prototype.startRatchet = function(firstKey) {\n    var i, k, len, ref;\n    ref = ['conf_key', 'last_key'];\n    for (i = 0, len = ref.length; i < len; i++) {\n      k = ref[i];\n      if (!this[k]) {\n        this[k] = firstKey;\n        this.storeKey(k);\n      }\n    }\n    if (!this.next_key) {\n      this.next_key = Nacl.makeKeyPair();\n      return this.storeKey('next_key');\n    }\n  };\n\n  KeyRatchet.prototype.pushKey = function(newKey) {\n    var i, len, ref, results, s;\n    this.last_key = this.conf_key;\n    this.conf_key = this.next_key;\n    this.next_key = newKey;\n    ref = this._roles;\n    results = [];\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      results.push(this.storeKey(s));\n    }\n    return results;\n  };\n\n  KeyRatchet.prototype.confKey = function(confirmedKey) {\n    var i, len, ref, s;\n    if ((this.conf_key != null) && this.conf_key.equal(confirmedKey)) {\n      return false;\n    }\n    this.last_key = this.conf_key;\n    this.conf_key = confirmedKey;\n    ref = ['last_key', 'conf_key'];\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      this.storeKey(s);\n    }\n    return true;\n  };\n\n  KeyRatchet.prototype.curKey = function() {\n    if (this.conf_key) {\n      return this.conf_key;\n    }\n    return this.last_key;\n  };\n\n  KeyRatchet.prototype.h2_last_key = function() {\n    return Nacl.h2(this.last_key.boxPk);\n  };\n\n  KeyRatchet.prototype.h2_conf_key = function() {\n    return Nacl.h2(this.conf_key.boxPk);\n  };\n\n  KeyRatchet.prototype.h2_next_key = function() {\n    return Nacl.h2(this.next_key.boxPk);\n  };\n\n  KeyRatchet.prototype.keyByHash = function(hash) {\n    var i, len, ref, s;\n    ref = this._roles;\n    for (i = 0, len = ref.length; i < len; i++) {\n      s = ref[i];\n      if (Nacl.h2(this[s].boxPk) === hash) {\n        return this[s];\n      }\n    }\n  };\n\n  KeyRatchet.prototype.isNextKeyHash = function(hash) {\n    return this.h2_next_key().equal(hash);\n  };\n\n  KeyRatchet.prototype.toStr = function() {\n    return JSON.stringify(this).toBase64();\n  };\n\n  KeyRatchet.prototype.fromStr = function(str) {\n    return Utils.extend(this, JSON.parse(str.fromBase64()));\n  };\n\n  return KeyRatchet;\n\n})();\n\nmodule.exports = KeyRatchet;\n\nif (window.__CRYPTO_DEBUG) {\n  window.KeyRatchet = KeyRatchet;\n}\n\n\n},{\"nacl\":9}],4:[function(require,module,exports){\nvar Config, CryptoStorage, KeyRing, Keys, Nacl, Utils,\n  hasProp = {}.hasOwnProperty;\n\nConfig = require('config');\n\nCryptoStorage = require('crypto_storage');\n\nKeys = require('keys');\n\nNacl = require('nacl');\n\nUtils = require('utils');\n\nKeyRing = (function() {\n  function KeyRing(id, strMasterKey) {\n    var key;\n    if (strMasterKey == null) {\n      strMasterKey = null;\n    }\n    if (strMasterKey) {\n      key = Keys.fromString(strMasterKey);\n      this.storage = new CryptoStorage(key, id);\n    }\n    if (!this.storage) {\n      this.storage = new CryptoStorage(null, id);\n    }\n    this._ensureKeys();\n  }\n\n  KeyRing.prototype._ensureKeys = function() {\n    this._loadCommKey();\n    return this._loadGuestKeys();\n  };\n\n  KeyRing.prototype._loadCommKey = function() {\n    this.comm_key = this.getKey('comm_key');\n    if (this.comm_key) {\n      return;\n    }\n    this.comm_key = Nacl.makeKeyPair();\n    return this.saveKey('comm_key', this.comm_key);\n  };\n\n  KeyRing.prototype._loadGuestKeys = function() {\n    var j, len, r, ref, results;\n    this.registry = this.storage.get('guest_registry') || [];\n    this.guest_keys = {};\n    ref = this.registry;\n    results = [];\n    for (j = 0, len = ref.length; j < len; j++) {\n      r = ref[j];\n      results.push(this.guest_keys[r] = this.storage.get(r + \".guest\"));\n    }\n    return results;\n  };\n\n  KeyRing.prototype.commFromSeed = function(seed) {\n    this.comm_key = Nacl.fromSeed(Nacl.encode_utf8(seed));\n    return this.storage.save('comm_key', this.comm_key.toString());\n  };\n\n  KeyRing.prototype.commFromSecKey = function(rawSecKey) {\n    this.comm_key = Nacl.fromSecretKey(rawSecKey);\n    return this.storage.save('comm_key', this.comm_key.toString());\n  };\n\n  KeyRing.prototype.tagByHpk = function(hpk) {\n    var k, ref, v;\n    ref = this.guest_keys;\n    for (k in ref) {\n      if (!hasProp.call(ref, k)) continue;\n      v = ref[k];\n      if (hpk === Nacl.h2(v.fromBase64()).toBase64()) {\n        return k;\n      }\n    }\n  };\n\n  KeyRing.prototype.getMasterKey = function() {\n    return this.storage.storage_key.key2str('key');\n  };\n\n  KeyRing.prototype.getPubCommKey = function() {\n    return this.comm_key.strPubKey();\n  };\n\n  KeyRing.prototype.saveKey = function(tag, key) {\n    this.storage.save(tag, key.toString());\n    return key;\n  };\n\n  KeyRing.prototype.getKey = function(tag) {\n    var k;\n    k = this.storage.get(tag);\n    if (k) {\n      return Keys.fromString(k);\n    } else {\n      return null;\n    }\n  };\n\n  KeyRing.prototype._addRegistry = function(strGuestTag) {\n    if (!strGuestTag) {\n      return null;\n    }\n    if (!(this.registry.indexOf(strGuestTag) > -1)) {\n      return this.registry.push(strGuestTag);\n    }\n  };\n\n  KeyRing.prototype._saveNewGuest = function(tag, pk) {\n    if (!(tag && pk)) {\n      return null;\n    }\n    this.storage.save(\"guest[\" + tag + \"]\", pk);\n    return this.storage.save('guest_registry', this.registry);\n  };\n\n  KeyRing.prototype._removeGuestRecord = function(tag) {\n    var i;\n    if (!tag) {\n      return null;\n    }\n    this.storage.remove(\"guest[\" + tag + \"]\");\n    i = this.registry.indexOf(tag);\n    if (i > -1) {\n      this.registry.splice(i, 1);\n      return this.storage.save('guest_registry', this.registry);\n    }\n  };\n\n  KeyRing.prototype.addGuest = function(strGuestTag, b64_pk) {\n    if (!(strGuestTag && b64_pk)) {\n      return null;\n    }\n    b64_pk = b64_pk.trimLines();\n    this._addRegistry(strGuestTag);\n    this.guest_keys[strGuestTag] = b64_pk;\n    return this._saveNewGuest(strGuestTag, b64_pk);\n  };\n\n  KeyRing.prototype.addTempGuest = function(strGuestTag, strPubKey) {\n    if (!(strGuestTag && strPubKey)) {\n      return null;\n    }\n    strPubKey = strPubKey.trimLines();\n    this.guest_keys[strGuestTag] = strPubKey;\n    return Utils.delay(Config.RELAY_SESSION_TIMEOUT, (function(_this) {\n      return function() {\n        return delete _this.guest_keys[strGuestTag];\n      };\n    })(this));\n  };\n\n  KeyRing.prototype.removeGuest = function(strGuestTag) {\n    if (!(strGuestTag && this.guest_keys[strGuestTag])) {\n      return null;\n    }\n    this.guest_keys[strGuestTag] = null;\n    delete this.guest_keys[strGuestTag];\n    return this._removeGuestRecord(strGuestTag);\n  };\n\n  KeyRing.prototype.getGuestKey = function(strGuestTag) {\n    if (!(strGuestTag && this.guest_keys[strGuestTag])) {\n      return null;\n    }\n    return new Keys({\n      boxPk: this.getGuestRecord(strGuestTag).fromBase64()\n    });\n  };\n\n  KeyRing.prototype.getGuestRecord = function(strGuestTag) {\n    if (!(strGuestTag && this.guest_keys[strGuestTag])) {\n      return null;\n    }\n    return this.guest_keys[strGuestTag];\n  };\n\n  KeyRing.prototype.selfDestruct = function(overseerAuthorized) {\n    var g, j, len, rcopy;\n    if (!overseerAuthorized) {\n      return null;\n    }\n    rcopy = this.registry.slice();\n    for (j = 0, len = rcopy.length; j < len; j++) {\n      g = rcopy[j];\n      this.removeGuest(g);\n    }\n    this.storage.remove('guest_registry');\n    this.storage.remove('comm_key');\n    return this.storage.selfDestruct(overseerAuthorized);\n  };\n\n  return KeyRing;\n\n})();\n\nmodule.exports = KeyRing;\n\nif (window.__CRYPTO_DEBUG) {\n  window.KeyRing = KeyRing;\n}\n\n\n},{\"config\":1,\"crypto_storage\":2,\"keys\":5,\"nacl\":9,\"utils\":13}],5:[function(require,module,exports){\nvar Keys, Utils,\n  hasProp = {}.hasOwnProperty;\n\nUtils = require('utils');\n\nKeys = (function() {\n  function Keys(hashKeys) {\n    if (!hashKeys) {\n      return;\n    }\n    Utils.extend(this, hashKeys);\n  }\n\n  Keys.prototype.toString = function() {\n    return JSON.stringify(this.constructor.keys2str(this));\n  };\n\n  Keys.fromString = function(strKeys) {\n    if (!strKeys) {\n      return null;\n    }\n    return this.str2keys(JSON.parse(strKeys.trimLines()));\n  };\n\n  Keys.prototype.key2str = function(strName) {\n    if (!(strName && (this[strName] != null))) {\n      return null;\n    }\n    return this[strName].toBase64();\n  };\n\n  Keys.prototype.strPubKey = function() {\n    return this.boxPk.toBase64();\n  };\n\n  Keys.prototype.strSecKey = function() {\n    return this.boxSk.toBase64();\n  };\n\n  Keys.prototype.equal = function(k) {\n    if (this.strPubKey() !== k.strPubKey()) {\n      return false;\n    }\n    if ((this.boxSk != null) !== (k.boxSk != null)) {\n      return false;\n    }\n    if (this.boxSk != null) {\n      return this.strSecKey() === k.strSecKey();\n    }\n    return true;\n  };\n\n  Keys.keys2str = function(objKey) {\n    var k, r, v;\n    r = new Keys();\n    for (k in objKey) {\n      if (!hasProp.call(objKey, k)) continue;\n      v = objKey[k];\n      r[k] = v.toBase64();\n    }\n    return r;\n  };\n\n  Keys.str2keys = function(strObj) {\n    var k, r, v;\n    r = new Keys();\n    for (k in strObj) {\n      if (!hasProp.call(strObj, k)) continue;\n      v = strObj[k];\n      r[k] = v.fromBase64();\n    }\n    return r;\n  };\n\n  return Keys;\n\n})();\n\nmodule.exports = Keys;\n\nif (window.__CRYPTO_DEBUG) {\n  window.Keys = Keys;\n}\n\n\n},{\"utils\":13}],6:[function(require,module,exports){\nvar Config, KeyRing, MailBox, Nacl, Utils;\n\nConfig = require('config');\n\nKeyRing = require('keyring');\n\nNacl = require('nacl');\n\nUtils = require('utils');\n\nMailBox = (function() {\n  function MailBox(identity, strMasterKey) {\n    this.identity = identity;\n    if (strMasterKey == null) {\n      strMasterKey = null;\n    }\n    this.keyRing = new KeyRing(this.identity, strMasterKey);\n    this.session_keys = {};\n    this.session_relay = {};\n    this.session_timeout = {};\n  }\n\n  MailBox.fromSeed = function(seed, id, strMasterKey) {\n    var mbx;\n    if (id == null) {\n      id = seed;\n    }\n    if (strMasterKey == null) {\n      strMasterKey = null;\n    }\n    mbx = new MailBox(id, strMasterKey);\n    mbx.keyRing.commFromSeed(id);\n    mbx._hpk = null;\n    return mbx;\n  };\n\n  MailBox.fromSecKey = function(secKey, id, strMasterKey) {\n    var mbx;\n    if (strMasterKey == null) {\n      strMasterKey = null;\n    }\n    mbx = new MailBox(id, strMasterKey);\n    mbx.keyRing.commFromSecKey(secKey);\n    mbx._hpk = null;\n    return mbx;\n  };\n\n  MailBox.prototype.hpk = function() {\n    if (this._hpk) {\n      return this._hpk;\n    }\n    return this._hpk = Nacl.h2(this.keyRing.comm_key.boxPk);\n  };\n\n  MailBox.prototype.getPubCommKey = function() {\n    return this.keyRing.getPubCommKey();\n  };\n\n  MailBox.prototype.createSessionKey = function(sess_id) {\n    if (!sess_id) {\n      throw new Error('createSessionKey - no sess_id');\n    }\n    if (this.session_keys[sess_id] != null) {\n      return this.session_keys[sess_id];\n    }\n    this.session_keys[sess_id] = Nacl.makeKeyPair();\n    this.session_timeout[sess_id] = Utils.delay(Config.RELAY_SESSION_TIMEOUT, (function(_this) {\n      return function() {\n        _this.session_keys[sess_id] = null;\n        delete _this.session_keys[sess_id];\n        _this.session_timeout[sess_id] = null;\n        delete _this.session_timeout[sess_id];\n        _this.session_relay[sess_id] = null;\n        return delete _this.session_relay[sess_id];\n      };\n    })(this));\n    return this.session_keys[sess_id];\n  };\n\n  MailBox.prototype.rawEncodeMessage = function(msg, pkTo, skFrom) {\n    var nonce, r;\n    if (!((msg != null) && (pkTo != null) && (skFrom != null))) {\n      throw new Error('rawEncodeMessage: missing params');\n    }\n    nonce = this._make_nonce();\n    return r = {\n      nonce: nonce.toBase64(),\n      ctext: Nacl.use().crypto_box(this._parseData(msg), nonce, pkTo, skFrom).toBase64()\n    };\n  };\n\n  MailBox.prototype.rawDecodeMessage = function(nonce, ctext, pkFrom, skTo) {\n    var NC;\n    if (!((nonce != null) && (ctext != null) && (pkFrom != null) && (skTo != null))) {\n      throw new Error('rawEncodeMessage: missing params');\n    }\n    NC = Nacl.use();\n    return JSON.parse(NC.decode_utf8(NC.crypto_box_open(ctext, nonce, pkFrom, skTo)));\n  };\n\n  MailBox.prototype.encodeMessage = function(guest, msg, session, skTag) {\n    var gpk, sk;\n    if (session == null) {\n      session = false;\n    }\n    if (skTag == null) {\n      skTag = null;\n    }\n    if (!((guest != null) && (msg != null))) {\n      throw new Error('encodeMessage: missing params');\n    }\n    if ((gpk = this._gPk(guest)) == null) {\n      throw new Error(\"encodeMessage: don't know guest \" + guest);\n    }\n    sk = this._getSecretKey(guest, session, skTag);\n    return this.rawEncodeMessage(msg, gpk, sk);\n  };\n\n  MailBox.prototype.decodeMessage = function(guest, nonce, ctext, session, skTag) {\n    var gpk, sk;\n    if (session == null) {\n      session = false;\n    }\n    if (skTag == null) {\n      skTag = null;\n    }\n    if (!((guest != null) && (nonce != null) && (ctext != null))) {\n      throw new Error('decodeMessage: missing params');\n    }\n    if ((gpk = this._gPk(guest)) == null) {\n      throw new Error(\"decodeMessage: don't know guest \" + guest);\n    }\n    sk = this._getSecretKey(guest, session, skTag);\n    return this.rawDecodeMessage(nonce.fromBase64(), ctext.fromBase64(), gpk, sk);\n  };\n\n  MailBox.prototype.connectToRelay = function(relay) {\n    return relay.openConnection().then((function(_this) {\n      return function() {\n        return relay.connectMailbox(_this).then(function() {\n          return _this.lastRelay = relay;\n        });\n      };\n    })(this));\n  };\n\n  MailBox.prototype.sendToVia = function(guest, relay, msg) {\n    return this.connectToRelay(relay).then((function(_this) {\n      return function() {\n        return _this.relay_send(guest, msg, relay);\n      };\n    })(this));\n  };\n\n  MailBox.prototype.getRelayMessages = function(relay) {\n    return this.connectToRelay(relay).then((function(_this) {\n      return function() {\n        return _this.relay_messages();\n      };\n    })(this));\n  };\n\n  MailBox.prototype.relay_count = function() {\n    if (!this.lastRelay) {\n      throw new Error('relay_count - no open relay');\n    }\n    return this.lastRelay.count(this).then((function(_this) {\n      return function() {\n        return _this.count = parseInt(_this.lastRelay.result);\n      };\n    })(this));\n  };\n\n  MailBox.prototype.relay_send = function(guest, msg) {\n    var enc_msg;\n    if (!this.lastRelay) {\n      throw new Error('mbx: relay_send - no open relay');\n    }\n    enc_msg = this.encodeMessage(guest, msg);\n    this.lastMsg = enc_msg;\n    return this.lastRelay.upload(this, Nacl.h2(this._gPk(guest)), enc_msg);\n  };\n\n  MailBox.prototype.relay_messages = function() {\n    if (!this.lastRelay) {\n      throw new Error('relay_messages - no open relay');\n    }\n    return this.lastRelay.download(this).then((function(_this) {\n      return function() {\n        var emsg, j, len, ref, results, tag;\n        _this.lastDownload = [];\n        ref = _this.lastRelay.result;\n        results = [];\n        for (j = 0, len = ref.length; j < len; j++) {\n          emsg = ref[j];\n          if ((tag = _this.keyRing.tagByHpk(emsg.from))) {\n            emsg['fromTag'] = tag;\n            emsg['msg'] = _this.decodeMessage(tag, emsg.nonce, emsg.data);\n            if (emsg['msg'] != null) {\n              delete emsg.data;\n            }\n          }\n          results.push(_this.lastDownload.push(emsg));\n        }\n        return results;\n      };\n    })(this));\n  };\n\n  MailBox.prototype.relay_nonce_list = function() {\n    if (!this.lastDownload) {\n      throw new Error('relay_nonce_list - no metadata');\n    }\n    return Utils.map(this.lastDownload, function(i) {\n      return i.nonce;\n    });\n  };\n\n  MailBox.prototype.relay_delete = function(list) {\n    if (!this.lastRelay) {\n      throw new Error('relay_delete - no open relay');\n    }\n    return this.lastRelay[\"delete\"](this, list);\n  };\n\n  MailBox.prototype.clean = function(r) {\n    return this.getRelayMessages(r).then((function(_this) {\n      return function() {\n        return _this.relay_delete(_this.relay_nonce_list());\n      };\n    })(this));\n  };\n\n  MailBox.prototype.selfDestruct = function(overseerAuthorized) {\n    if (!overseerAuthorized) {\n      return null;\n    }\n    return this.keyRing.selfDestruct(overseerAuthorized);\n  };\n\n  MailBox.prototype._gKey = function(strId) {\n    if (!strId) {\n      return null;\n    }\n    return this.keyRing.getGuestKey(strId);\n  };\n\n  MailBox.prototype._gPk = function(strId) {\n    var ref;\n    if (!strId) {\n      return null;\n    }\n    return (ref = this._gKey(strId)) != null ? ref.boxPk : void 0;\n  };\n\n  MailBox.prototype._gHpk = function(strId) {\n    if (!strId) {\n      return null;\n    }\n    return Nacl.h2(this._gPk(strId));\n  };\n\n  MailBox.prototype._getSecretKey = function(guest, session, skTag) {\n    if (!skTag) {\n      if (session) {\n        return this.session_keys[guest].boxSk;\n      } else {\n        return this.keyRing.comm_key.boxSk;\n      }\n    } else {\n      return this._gPk(skTag);\n    }\n  };\n\n  MailBox.prototype._parseData = function(data) {\n    if (Utils.type(data) === 'Uint8Array') {\n      return data;\n    }\n    return Nacl.use().encode_utf8(JSON.stringify(data));\n  };\n\n  MailBox.prototype._make_nonce = function(time) {\n    var bytes, i, j, k, nonce, ref;\n    if (time == null) {\n      time = parseInt(Date.now() / 1000);\n    }\n    nonce = Nacl.use().crypto_box_random_nonce();\n    if (!((nonce != null) && nonce.length === 24)) {\n      throw new Error('RNG failed, try again?');\n    }\n    bytes = Utils.itoa(time);\n    for (i = j = 0; j <= 7; i = ++j) {\n      nonce[i] = 0;\n    }\n    for (i = k = 0, ref = bytes.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {\n      nonce[8 - bytes.length + i] = bytes[i];\n    }\n    return nonce;\n  };\n\n  return MailBox;\n\n})();\n\nmodule.exports = MailBox;\n\nif (window.__CRYPTO_DEBUG) {\n  window.MailBox = MailBox;\n}\n\n\n},{\"config\":1,\"keyring\":4,\"nacl\":9,\"utils\":13}],7:[function(require,module,exports){\nmodule.exports = {\n  Utils: require('utils'),\n  Mixins: require('mixins'),\n  Nacl: require('nacl'),\n  Keys: require('keys'),\n  SimpleStorageDriver: require('test_driver'),\n  CryptoStorage: require('crypto_storage'),\n  KeyRing: require('keyring'),\n  MailBox: require('mailbox'),\n  Relay: require('relay'),\n  RachetBox: require('rachetbox'),\n  startStorageSystem: function(storeImpl) {\n    return this.CryptoStorage.startStorageSystem(storeImpl);\n  },\n  setAjaxImpl: function(ajaxImpl) {\n    return this.Utils.setAjaxImpl(ajaxImpl);\n  }\n};\n\nif (window) {\n  window.glow = module.exports;\n}\n\n\n},{\"crypto_storage\":2,\"keyring\":4,\"keys\":5,\"mailbox\":6,\"mixins\":8,\"nacl\":9,\"rachetbox\":10,\"relay\":11,\"test_driver\":12,\"utils\":13}],8:[function(require,module,exports){\nvar C, Utils, j, len, ref;\n\nUtils = require('utils');\n\nUtils.include(String, {\n  toCodeArray: function() {\n    var j, len, results, s;\n    results = [];\n    for (j = 0, len = this.length; j < len; j++) {\n      s = this[j];\n      results.push(s.charCodeAt());\n    }\n    return results;\n  },\n  toUTF8: function() {\n    return unescape(encodeURIComponent(this));\n  },\n  fromUTF8: function() {\n    return decodeURIComponent(escape(this));\n  },\n  toUint8Array: function() {\n    return new Uint8Array(this.toUTF8().toCodeArray());\n  },\n  toUint8ArrayRaw: function() {\n    return new Uint8Array(this.toCodeArray());\n  },\n  fromBase64: function() {\n    return new Uint8Array((atob(this)).toCodeArray());\n  },\n  trimLines: function() {\n    return this.replace('\\r\\n', '').replace('\\n', '').replace('\\r', '');\n  }\n});\n\nref = [Array, Uint8Array, Uint16Array];\nfor (j = 0, len = ref.length; j < len; j++) {\n  C = ref[j];\n  Utils.include(C, {\n    fromCharCodes: function() {\n      var c;\n      return ((function() {\n        var k, len1, results;\n        results = [];\n        for (k = 0, len1 = this.length; k < len1; k++) {\n          c = this[k];\n          results.push(String.fromCharCode(c));\n        }\n        return results;\n      }).call(this)).join('');\n    },\n    toBase64: function() {\n      return btoa(this.fromCharCodes());\n    },\n    xorWith: function(a) {\n      var c, i;\n      if (this.length !== a.length) {\n        return null;\n      }\n      return new Uint8Array((function() {\n        var k, len1, results;\n        results = [];\n        for (i = k = 0, len1 = this.length; k < len1; i = ++k) {\n          c = this[i];\n          results.push(c ^ a[i]);\n        }\n        return results;\n      }).call(this));\n    },\n    equal: function(a2) {\n      var i, k, len1, v;\n      if (this.length !== a2.length) {\n        return false;\n      }\n      for (i = k = 0, len1 = this.length; k < len1; i = ++k) {\n        v = this[i];\n        if (v !== a2[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nUtils.include(Uint8Array, {\n  concat: function(anotherArray) {\n    var tmp;\n    tmp = new Uint8Array(this.byteLength + anotherArray.byteLength);\n    tmp.set(new Uint8Array(this), 0);\n    tmp.set(anotherArray, this.byteLength);\n    return tmp;\n  },\n  fill_with: function(val) {\n    var i, k, len1, v;\n    for (i = k = 0, len1 = this.length; k < len1; i = ++k) {\n      v = this[i];\n      this[i] = val;\n    }\n    return this;\n  }\n});\n\nmodule.exports = {};\n\n\n},{\"utils\":13}],9:[function(require,module,exports){\nvar Keys, Nacl, Utils, js_nacl;\n\nif (typeof nacl_factory !== \"undefined\" && nacl_factory !== null) {\n  js_nacl = nacl_factory;\n} else {\n  js_nacl = require('js-nacl');\n}\n\nKeys = require('keys');\n\nUtils = require('utils');\n\nNacl = (function() {\n  function Nacl() {}\n\n  Nacl.HEAP_SIZE = Math.pow(2, 23);\n\n  Nacl._instance = null;\n\n  Nacl._unloadTimer = null;\n\n  Nacl.use = function() {\n    if (this._unloadTimer) {\n      clearTimeout(this._unloadTimer);\n    }\n    this._unloadTimer = setTimeout((function() {\n      return Nacl.unload();\n    }), 15 * 1000);\n    if (!window.__nacl_instance) {\n      window.__nacl_instance = js_nacl.instantiate(this.HEAP_SIZE);\n    }\n    return window.__nacl_instance;\n  };\n\n  Nacl.unload = function() {\n    this._unloadTimer = null;\n    window.__nacl_instance = null;\n    return delete window.__nacl_instance;\n  };\n\n  Nacl.makeSecretKey = function() {\n    return new Keys({\n      key: this.use().random_bytes(this.use().crypto_secretbox_KEYBYTES)\n    });\n  };\n\n  Nacl.random = function(size) {\n    if (size == null) {\n      size = 32;\n    }\n    return this.use().random_bytes(size);\n  };\n\n  Nacl.makeKeyPair = function() {\n    return new Keys(this.use().crypto_box_keypair());\n  };\n\n  Nacl.fromSecretKey = function(raw_sk) {\n    return new Keys(this.use().crypto_box_keypair_from_raw_sk(raw_sk));\n  };\n\n  Nacl.fromSeed = function(seed) {\n    return new Keys(this.use().crypto_box_keypair_from_seed(seed));\n  };\n\n  Nacl.sha256 = function(data) {\n    return this.use().crypto_hash_sha256(data);\n  };\n\n  Nacl.to_hex = function(data) {\n    return this.use().to_hex(data);\n  };\n\n  Nacl.from_hex = function(data) {\n    return this.use().from_hex(data);\n  };\n\n  Nacl.encode_utf8 = function(data) {\n    return this.use().encode_utf8(data);\n  };\n\n  Nacl.decode_utf8 = function(data) {\n    return this.use().decode_utf8(data);\n  };\n\n  Nacl.h2 = function(str) {\n    var tmp;\n    if (Utils.type(str) === 'String') {\n      str = str.toUint8ArrayRaw();\n    }\n    tmp = new Uint8Array(32 + str.length);\n    tmp.fill_with(0);\n    tmp.set(str, 32);\n    return this.sha256(this.sha256(tmp));\n  };\n\n  Nacl.h2_64 = function(b64str) {\n    return Nacl.h2(b64str.fromBase64()).toBase64();\n  };\n\n  return Nacl;\n\n})();\n\nmodule.exports = Nacl;\n\nif (window.__CRYPTO_DEBUG) {\n  window.Nacl = Nacl;\n}\n\n\n},{\"js-nacl\":undefined,\"keys\":5,\"utils\":13}],10:[function(require,module,exports){\nvar KeyRatchet, KeyRing, Keys, Mailbox, Nacl, RatchetBox, Utils,\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nUtils = require('utils');\n\nNacl = require('nacl');\n\nKeys = require('keys');\n\nKeyRing = require('keyring');\n\nKeyRatchet = require('keyratchet');\n\nMailbox = require('mailbox');\n\nRatchetBox = (function(superClass) {\n  extend(RatchetBox, superClass);\n\n  function RatchetBox() {\n    return RatchetBox.__super__.constructor.apply(this, arguments);\n  }\n\n  RatchetBox.prototype._loadRatchets = function(guest) {\n    var gHpk;\n    gHpk = this._gHpk(guest).toBase64();\n    this.kr_local = new KeyRatchet(\"local_\" + gHpk + \"_for_\" + (this.hpk().toBase64()), this.keyRing, this.keyRing.comm_key);\n    return this.kr_guest = new KeyRatchet(\"guest_\" + gHpk + \"_for_\" + (this.hpk().toBase64()), this.keyRing, this.keyRing.getGuestKey(guest));\n  };\n\n  RatchetBox.prototype.relay_send = function(guest, m) {\n    var enc_msg, msg;\n    if (!this.lastRelay) {\n      throw new Error('rbx: relay_send - no open relay');\n    }\n    if (!(guest && m)) {\n      throw new Error('rbx: relay_send - missing params');\n    }\n    this._loadRatchets(guest);\n    msg = {\n      org_msg: m\n    };\n    if (m.got_key == null) {\n      msg['next_key'] = this.kr_local.next_key.strPubKey();\n    }\n    if (m.got_key == null) {\n      enc_msg = this.rawEncodeMessage(msg, this.kr_guest.conf_key.boxPk, this.kr_local.conf_key.boxSk);\n      this.lastMsg = enc_msg;\n    } else {\n      enc_msg = this.rawEncodeMessage(msg, this.kr_guest.last_key.boxPk, this.kr_local.conf_key.boxSk);\n    }\n    return this.lastRelay.upload(this, Nacl.h2(this._gPk(guest)), enc_msg);\n  };\n\n  RatchetBox.prototype._try_keypair = function(nonce, ctext, pk, sk) {\n    var e, error;\n    try {\n      return this.rawDecodeMessage(nonce.fromBase64(), ctext.fromBase64(), pk, sk);\n    } catch (error) {\n      e = error;\n      return null;\n    }\n  };\n\n  RatchetBox.prototype.decodeMessage = function(guest, nonce, ctext, session, skTag) {\n    var i, j, key_pairs, kp, len, r;\n    if (session == null) {\n      session = false;\n    }\n    if (skTag == null) {\n      skTag = null;\n    }\n    if (session) {\n      return RatchetBox.__super__.decodeMessage.call(this, guest, nonce, ctext, session, skTag);\n    }\n    if (!((guest != null) && (nonce != null) && (ctext != null))) {\n      throw new Error('decodeMessage: missing params');\n    }\n    this._loadRatchets(guest);\n    key_pairs = [[this.kr_guest.conf_key.boxPk, this.kr_local.conf_key.boxSk], [this.kr_guest.last_key.boxPk, this.kr_local.last_key.boxSk], [this.kr_guest.conf_key.boxPk, this.kr_local.last_key.boxSk], [this.kr_guest.last_key.boxPk, this.kr_local.conf_key.boxSk]];\n    for (i = j = 0, len = key_pairs.length; j < len; i = ++j) {\n      kp = key_pairs[i];\n      r = this._try_keypair(nonce, ctext, kp[0], kp[1]);\n      if (r != null) {\n        return r;\n      }\n    }\n    console.log('RatchetBox decryption failed: message from unknown guest or ratchet out of sync');\n    return null;\n  };\n\n  RatchetBox.prototype.relay_messages = function() {\n    return RatchetBox.__super__.relay_messages.call(this).then((function(_this) {\n      return function() {\n        var j, len, m, ref, ref1, ref2, ref3, sendNext, send_confs;\n        send_confs = [];\n        ref = _this.lastDownload;\n        for (j = 0, len = ref.length; j < len; j++) {\n          m = ref[j];\n          if (!m.fromTag) {\n            continue;\n          }\n          _this._loadRatchets(m.fromTag);\n          if (((ref1 = m.msg) != null ? ref1.next_key : void 0) != null) {\n            if (_this.kr_guest.confKey(new Keys({\n              boxPk: m.msg.next_key.fromBase64()\n            }))) {\n              send_confs.push({\n                toTag: m.fromTag,\n                key: m.msg.next_key,\n                msg: {\n                  got_key: Nacl.h2_64(m.msg.next_key)\n                }\n              });\n            }\n          }\n          if (((ref2 = m.msg) != null ? (ref3 = ref2.org_msg) != null ? ref3.got_key : void 0 : void 0) != null) {\n            m.msg = m.msg.org_msg;\n            if (_this.kr_local.isNextKeyHash(m.msg.got_key.fromBase64())) {\n              _this.kr_local.pushKey(Nacl.makeKeyPair());\n            }\n            m.msg = null;\n          }\n          if (m.msg != null) {\n            m.msg = m.msg.org_msg;\n          }\n        }\n        sendNext = function() {\n          var sc;\n          if (send_confs.length > 0) {\n            sc = send_confs.shift();\n            return _this.relay_send(sc.toTag, sc.msg).then(function() {\n              return sendNext();\n            });\n          }\n        };\n        return sendNext();\n      };\n    })(this));\n  };\n\n  return RatchetBox;\n\n})(Mailbox);\n\nmodule.exports = RatchetBox;\n\nif (window.__CRYPTO_DEBUG) {\n  window.RatchetBox = RatchetBox;\n}\n\n\n},{\"keyratchet\":3,\"keyring\":4,\"keys\":5,\"mailbox\":6,\"nacl\":9,\"utils\":13}],11:[function(require,module,exports){\nvar Config, Keys, Nacl, Relay, Utils,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nConfig = require('config');\n\nKeys = require('keys');\n\nNacl = require('nacl');\n\nUtils = require('utils');\n\nRelay = (function() {\n  function Relay(url) {\n    this.url = url != null ? url : null;\n    this._ajax = bind(this._ajax, this);\n    this._reset_state();\n    this.lastError = null;\n    this.RELAY_COMMANDS = ['count', 'upload', 'download', 'delete'];\n  }\n\n  Relay.prototype.openConnection = function() {\n    return this.getServerToken().then((function(_this) {\n      return function() {\n        return _this.getServerKey();\n      };\n    })(this));\n  };\n\n  Relay.prototype.getServerToken = function() {\n    if (!this.url) {\n      throw new Error('getServerToken - no url');\n    }\n    this.lastError = null;\n    if (!this.client_token) {\n      this.client_token = Nacl.random(Config.RELAY_TOKEN_LEN);\n    }\n    if (this.client_token && this.client_token.length !== Config.RELAY_TOKEN_LEN) {\n      throw new Error(\"Token must be \" + Config.RELAY_TOKEN_LEN + \" bytes\");\n    }\n    return this._ajax('start_session', this.client_token.toBase64()).then((function(_this) {\n      return function(data) {\n        var lines;\n        lines = _this._processData(data);\n        _this.relay_token = lines[0].fromBase64();\n        _this.diff = lines.length === 2 ? parseInt(lines[1]) : 0;\n        _this.h2_relay_token = Nacl.h2(_this.relay_token);\n        _this._schedule_expire_session(Config.RELAY_TOKEN_TIMEOUT);\n        if (_this.diff > 4) {\n          console.log(\"Relay \" + _this.url + \" requested difficulty \" + _this.diff + \". Session handshake may take longer.\");\n        }\n        if (_this.diff > 16) {\n          return console.log(\"Attempting handshake at difficulty \" + _this.diff + \"! This may take a while\");\n        }\n      };\n    })(this));\n  };\n\n  Relay.prototype.getServerKey = function() {\n    var handshake, nonce, sess_hs;\n    if (!(this.url && this.client_token && this.relay_token)) {\n      throw new Error('getServerKey - missing params');\n    }\n    this.lastError = null;\n    this.h2_client_token = Nacl.h2(this.client_token).toBase64();\n    handshake = this.client_token.concat(this.relay_token);\n    if (this.diff === 0) {\n      sess_hs = Nacl.h2(handshake).toBase64();\n    } else {\n      nonce = Nacl.random(32);\n      while (!Utils.arrayZeroBits(Nacl.h2(handshake.concat(nonce)), this.diff)) {\n        nonce = Nacl.random(32);\n      }\n      sess_hs = nonce.toBase64();\n    }\n    return this._ajax('verify_session', this.h2_client_token + \"\\r\\n\" + sess_hs + \"\\r\\n\").then((function(_this) {\n      return function(d) {\n        var relay_pk;\n        relay_pk = d.fromBase64();\n        _this.relay_key = new Keys({\n          boxPk: relay_pk\n        });\n        return _this.online = true;\n      };\n    })(this));\n  };\n\n  Relay.prototype.connectMailbox = function(mbx) {\n    var client_temp, h2_sign, inner, masked_client_temp_pk, outer, relay_id, sign;\n    if (!((mbx != null) && this.online && (this.relay_key != null) && (this.url != null))) {\n      throw new Error('connectMailbox - missing params');\n    }\n    this.lastError = null;\n    relay_id = \"relay_\" + this.url;\n    client_temp = mbx.createSessionKey(relay_id).boxPk;\n    mbx.keyRing.addTempGuest(relay_id, this.relay_key.strPubKey());\n    delete this.relay_key;\n    masked_client_temp_pk = client_temp.toBase64();\n    sign = client_temp.concat(this.relay_token).concat(this.client_token);\n    h2_sign = Nacl.h2(sign);\n    inner = mbx.encodeMessage(relay_id, h2_sign);\n    inner['pub_key'] = mbx.keyRing.getPubCommKey();\n    outer = mbx.encodeMessage(\"relay_\" + this.url, inner, true);\n    return this._ajax('prove', (this.h2_client_token + \"\\r\\n\") + (masked_client_temp_pk + \"\\r\\n\") + (outer.nonce + \"\\r\\n\") + (\"\" + outer.ctext)).then((function(_this) {\n      return function(d) {};\n    })(this));\n  };\n\n  Relay.prototype.runCmd = function(cmd, mbx, params) {\n    var data, message;\n    if (params == null) {\n      params = null;\n    }\n    if (!((cmd != null) && (mbx != null))) {\n      throw new Error('runCmd - missing params');\n    }\n    if (indexOf.call(this.RELAY_COMMANDS, cmd) < 0) {\n      throw new Error(\"Relay \" + this.url + \" doesn't support \" + cmd);\n    }\n    data = {\n      cmd: cmd\n    };\n    if (params) {\n      data = Utils.extend(data, params);\n    }\n    message = mbx.encodeMessage(\"relay_\" + this.url, data, true);\n    return this._ajax('command', ((mbx.hpk().toBase64()) + \"\\r\\n\") + (message.nonce + \"\\r\\n\") + (\"\" + message.ctext)).then((function(_this) {\n      return function(d) {\n        if (cmd === 'upload') {\n          return;\n        }\n        if (d == null) {\n          throw new Error(_this.url + \" - \" + cmd + \" error\");\n        }\n        if (cmd === 'count' || cmd === 'download') {\n          return _this.result = _this._processResponse(d, mbx, cmd);\n        } else {\n          return _this.result = JSON.parse(d);\n        }\n      };\n    })(this));\n  };\n\n  Relay.prototype._processResponse = function(d, mbx, cmd) {\n    var ctext, datain, nonce;\n    datain = this._processData(d);\n    if (datain.length !== 2) {\n      throw new Error(this.url + \" - \" + cmd + \": Bad response\");\n    }\n    nonce = datain[0];\n    ctext = datain[1];\n    return mbx.decodeMessage(\"relay_\" + this.url, nonce, ctext, true);\n  };\n\n  Relay.prototype._processData = function(d) {\n    var datain;\n    datain = d.split('\\r\\n');\n    if (!(datain.length >= 2)) {\n      datain = d.split('\\n');\n    }\n    return datain;\n  };\n\n  Relay.prototype.count = function(mbx) {\n    return this.runCmd('count', mbx);\n  };\n\n  Relay.prototype.upload = function(mbx, toHpk, payload) {\n    return this.runCmd('upload', mbx, {\n      to: toHpk.toBase64(),\n      payload: payload\n    });\n  };\n\n  Relay.prototype.download = function(mbx) {\n    return this.runCmd('download', mbx);\n  };\n\n  Relay.prototype[\"delete\"] = function(mbx, nonce_list) {\n    return this.runCmd('delete', mbx, {\n      payload: nonce_list\n    });\n  };\n\n  Relay.prototype._reset_state = function() {\n    this.client_token = null;\n    this.online = false;\n    this.relay_token = null;\n    this.relay_key = null;\n    return this.client_token_expiration = null;\n  };\n\n  Relay.prototype._schedule_expire_session = function(tout) {\n    if (this.client_token_expiration) {\n      clearTimeout(this.client_token_expiration);\n    }\n    return this.client_token_expiration = setTimeout((function(_this) {\n      return function() {\n        return _this._reset_state();\n      };\n    })(this), tout);\n  };\n\n  Relay.prototype._ajax = function(cmd, data) {\n    return Utils.ajax(this.url + \"/\" + cmd, data);\n  };\n\n  return Relay;\n\n})();\n\nmodule.exports = Relay;\n\nif (window.__CRYPTO_DEBUG) {\n  window.Relay = Relay;\n}\n\n\n},{\"config\":1,\"keys\":5,\"nacl\":9,\"utils\":13}],12:[function(require,module,exports){\nvar SimpleTestDriver;\n\nSimpleTestDriver = (function() {\n  SimpleTestDriver.prototype._state = null;\n\n  SimpleTestDriver.prototype._key_tag = function(key) {\n    return this._root_tag + \".\" + key;\n  };\n\n  function SimpleTestDriver(root, sourceData) {\n    if (root == null) {\n      root = 'storage.';\n    }\n    if (sourceData == null) {\n      sourceData = null;\n    }\n    this._root_tag = \"__glow.\" + root;\n    this._load(sourceData);\n  }\n\n  SimpleTestDriver.prototype.get = function(key) {\n    if (!this._state) {\n      this._load();\n    }\n    if (this._state[key]) {\n      return this._state[key];\n    } else {\n      return JSON.parse(localStorage.getItem(this._key_tag(key)));\n    }\n  };\n\n  SimpleTestDriver.prototype.set = function(key, value) {\n    if (!this._state) {\n      this._load();\n    }\n    this._state[key] = value;\n    localStorage.setItem(this._key_tag(key), JSON.stringify(value));\n    return this._persist();\n  };\n\n  SimpleTestDriver.prototype.remove = function(key) {\n    if (!this._state) {\n      this._load();\n    }\n    delete this._state[key];\n    localStorage.removeItem(this._key_tag(key));\n    return this._persist();\n  };\n\n  SimpleTestDriver.prototype._persist = function() {};\n\n  SimpleTestDriver.prototype._load = function(sourceData) {\n    if (sourceData == null) {\n      sourceData = null;\n    }\n    this._state = sourceData ? sourceData : {};\n    return console.log('INFO: SimpleTestDriver uses localStorage and should not be used in production for permanent key storage.');\n  };\n\n  return SimpleTestDriver;\n\n})();\n\nmodule.exports = SimpleTestDriver;\n\n\n},{}],13:[function(require,module,exports){\nvar Config, Utils;\n\nConfig = require('config');\n\nUtils = (function() {\n  function Utils() {}\n\n  Utils.extend = function(target, source) {\n    var key, val;\n    if (typeof $ !== \"undefined\" && $ !== null ? $.extend : void 0) {\n      return $.extend(target, source);\n    } else {\n      for (key in source) {\n        val = source[key];\n        if (source[key] !== void 0) {\n          target[key] = source[key];\n        }\n      }\n      return target;\n    }\n  };\n\n  Utils.map = function(array, func) {\n    if (typeof $ !== \"undefined\" && $ !== null ? $.map : void 0) {\n      return typeof $ !== \"undefined\" && $ !== null ? $.map(array, func) : void 0;\n    } else {\n      return Array.prototype.map.apply(array, [func]);\n    }\n  };\n\n  Utils.include = function(klass, mixin) {\n    return this.extend(klass.prototype, mixin);\n  };\n\n  Utils.type = function(obj) {\n    if (obj === void 0) {\n      return 'undefined';\n    }\n    if (obj === null) {\n      return 'null';\n    }\n    return Object.prototype.toString.call(obj).replace('[', '').replace(']', '').split(' ')[1];\n  };\n\n  Utils.ajaxImpl = null;\n\n  Utils.setAjaxImpl = function(ajaxImpl) {\n    return this.ajaxImpl = ajaxImpl;\n  };\n\n  Utils.ajax = function(url, data) {\n    if (this.ajaxImpl === null) {\n      if (typeof Q !== \"undefined\" && Q !== null ? Q.xhr : void 0) {\n        this.setAjaxImpl(function(url, data) {\n          return Q.xhr({\n            method: 'POST',\n            url: url,\n            headers: {\n              'Accept': 'text/plain',\n              'Content-Type': 'text/plain'\n            },\n            data: data,\n            responseType: 'text',\n            timeout: Config.RELAY_AJAX_TIMEOUT,\n            disableUploadProgress: true\n          }).then(function(response) {\n            return response.data;\n          });\n        });\n      } else if ((typeof $ !== \"undefined\" && $ !== null ? $.ajax : void 0) && (typeof $ !== \"undefined\" && $ !== null ? $.Deferred : void 0)) {\n        console.log('default ajax impl: setting to zepto with promises');\n        this.setAjaxImpl(function(url, data) {\n          return $.ajax({\n            url: url,\n            type: 'POST',\n            dataType: 'text',\n            timeout: Config.RELAY_AJAX_TIMEOUT,\n            context: this,\n            error: console.log,\n            contentType: 'text/plain',\n            data: data\n          });\n        });\n      } else {\n        throw new Error('ajax implementation not set; use q-xhr or $http');\n      }\n    }\n    return this.ajaxImpl(url, data);\n  };\n\n  Utils.delay = function(milliseconds, func) {\n    return setTimeout(func, milliseconds);\n  };\n\n  Utils.itoa = function(n) {\n    var floor, i, lg, pw, ref, top;\n    if (n <= 0) {\n      return new Uint8Array((function() {\n        var j, results;\n        results = [];\n        for (i = j = 0; j <= 7; i = ++j) {\n          results.push(0);\n        }\n        return results;\n      })());\n    }\n    ref = [Math.floor, Math.pow, Math.log], floor = ref[0], pw = ref[1], lg = ref[2];\n    top = floor(lg(n) / lg(256));\n    return new Uint8Array((function() {\n      var j, ref1, results;\n      results = [];\n      for (i = j = ref1 = top; ref1 <= 0 ? j <= 0 : j >= 0; i = ref1 <= 0 ? ++j : --j) {\n        results.push(floor(n / pw(256, i)) % 256);\n      }\n      return results;\n    })());\n  };\n\n  Utils.firstZeroBits = function(byte, n) {\n    return byte === ((byte >> n) << n);\n  };\n\n  Utils.arrayZeroBits = function(arr, diff) {\n    var a, i, j, ref, rmd;\n    rmd = diff;\n    for (i = j = 0, ref = 1 + diff / 8; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {\n      a = arr[i];\n      if (rmd <= 0) {\n        return true;\n      }\n      if (rmd > 8) {\n        rmd -= 8;\n        if (a > 0) {\n          return false;\n        }\n      } else {\n        return this.firstZeroBits(a, rmd);\n      }\n    }\n    return false;\n  };\n\n  Utils.logStack = function(err) {\n    var i, j, len, results, s, sl;\n    if (!err) {\n      err = new Error('stackLog');\n    }\n    s = err.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@').split('\\n');\n    results = [];\n    for (i = j = 0, len = s.length; j < len; i = ++j) {\n      sl = s[i];\n      results.push(console.log(i + \": \" + sl));\n    }\n    return results;\n  };\n\n  return Utils;\n\n})();\n\nmodule.exports = Utils;\n\nif (window.__CRYPTO_DEBUG) {\n  window.Utils = Utils;\n}\n\n\n},{\"config\":1}]},{},[7])\n\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig  = require 'config'\nKeys = require 'keys'\nNacl = require 'nacl'\n\n# Secure local storage\nclass CryptoStorage\n  # Keys are tagged in local storage with a versioned prefix\n  tag: (strKey) ->\n    strKey and strKey + @root\n\n  # Changing roots allows different versions to keep separate storage areas\n  constructor: (@storage_key = null, r = null) ->\n    @root = if r then \".#{r}#{Config._DEF_ROOT}\" else Config._DEF_ROOT\n\n    # TODO: move storage key to hw and provide it in ctor call\n    unless @storage_key\n      @_loadKey()\n\n    # If we don't have a loaded storage_key, make a new one\n    unless @storage_key\n      @newKey()\n\n  _saveKey: ->\n    @_set Config._SKEY_TAG, @storage_key.toString()\n\n  _loadKey: ->\n    keyStr = @_get Config._SKEY_TAG\n    @setKey Keys.fromString keyStr if keyStr\n\n  # have to call with overseerAuthorized as true for extra safety\n  selfDestruct: (overseerAuthorized) ->\n    @_local_remove @tag Config._SKEY_TAG if overseerAuthorized\n\n  setKey: (objStorageKey) ->\n    @storage_key = objStorageKey\n    @_saveKey()\n\n  newKey: ->\n    @setKey Nacl.makeSecretKey()\n\n  # main storage functions\n  save: (strTag, data) ->\n    unless strTag and data # nothing to do if either is null\n      return null\n\n    n = Nacl.use()\n    # let's convert the data to JSON, then make that string a byte array\n    data = n.encode_utf8 JSON.stringify data\n\n    # each data field saved generates its own nonce\n    nonce = n.crypto_secretbox_random_nonce()\n    aCText = n.crypto_secretbox(data, nonce, @storage_key.key)\n\n    # save the chipher text and nonce for this save op\n    @_set strTag, aCText.toBase64()\n    @_set \"#{Config._NONCE_TAG}.#{strTag}\", nonce.toBase64()\n    # signal success\n    true\n\n  get: (strTag) ->\n    ct = @_get strTag # get cipher text by storage tag\n    return null unless ct # nothing to do without cipher text\n\n    nonce = @_get \"#{Config._NONCE_TAG}.#{strTag}\"\n    return null unless nonce # nothing to do without nonce\n\n    n = Nacl.use()\n    # covert cipher text to arrays from base64 in local storage\n    aPText = n.crypto_secretbox_open(\n      ct.fromBase64()\n      nonce.fromBase64()\n      @storage_key.key\n    )\n    # restore JSON string from plain text array and parse it\n    JSON.parse n.decode_utf8 aPText\n\n  remove: (strTag) ->\n    for tag in [strTag, \"#{Config._NONCE_TAG}.#{strTag}\"]\n      @_local_remove @tag tag\n    true\n\n  # Private access functions for tagged read/write\n  _get: (strTag) ->\n    @_local_get @tag strTag\n\n  _set: (strTag, strData) ->\n    return null unless strTag and strData\n    @_local_set (@tag strTag), strData\n    strData\n\n  # For testing we can keep the storage key in local storage\n  # Eventually we should move it to the device's user hardware storage\n  # That will fully secure local storage data\n  _local_get: (str) ->\n    @_storage().get(str) or null\n  _local_set: (str, data) ->\n    @_storage().set str, data\n  _local_remove: (str) ->\n    @_storage().remove str\n\n  _storage: () ->\n    if not CryptoStorage._storageDriver\n      CryptoStorage.startStorageSystem()\n    CryptoStorage._storageDriver\n\n  @_storageDriver = null\n\n  @startStorageSystem = (driver) ->\n    if not driver\n      throw new Error 'The driver parameter cannot be empty.'\n    @_storageDriver = driver\n\nmodule.exports = CryptoStorage\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nNacl     = require 'nacl'\n\nclass KeyRatchet\n\n  # Last used key, we know other party has it\n  last_key: null\n\n  # Confirmed key, we know other party just got it\n  conf_key: null\n\n  # Next key, we sending it to the other party. We\n  # do not know when/if it will confirm it\n  next_key: null\n\n  _roles: ['last_key', 'conf_key', 'next_key']\n\n  constructor: (@id, @keyRing, firstKey =null) ->\n    throw new Error('KeyRatchet - missing params') unless @id and @keyRing\n    for s in @_roles\n      @[s] = @keyRing.getKey(@keyTag s)\n    @startRatchet firstKey if firstKey\n\n  keyTag: (role) ->\n    \"#{role}_#{@id}\"\n\n  storeKey: (role) ->\n    @keyRing.saveKey @keyTag(role), @[role]\n\n  startRatchet: (firstKey) ->\n    # If we dont have confirmed key to work with\n    # we have to start ratched with a default key\n    for k in ['conf_key', 'last_key']\n      unless @[k]\n        @[k] = firstKey\n        @storeKey k\n\n    # create next ratchet key unless we already done so\n    unless @next_key\n      @next_key = Nacl.makeKeyPair()\n      @storeKey 'next_key'\n\n  pushKey: (newKey) ->\n    @last_key = @conf_key\n    @conf_key = @next_key\n    @next_key = newKey\n    @storeKey(s) for s in @_roles\n\n  confKey: (confirmedKey) ->\n    return false if @conf_key? and @conf_key.equal confirmedKey\n    # console.log \"Key confirmed: replacing in #{@id} | #{@conf_key.boxPk.toBase64()} with #{confirmedKey.boxPk.toBase64()}\"\n    @last_key = @conf_key\n    @conf_key = confirmedKey\n    @storeKey(s) for s in ['last_key', 'conf_key']\n    return true\n\n  curKey: ->\n    return @conf_key if @conf_key\n    return @last_key\n\n  h2_last_key: -> Nacl.h2 @last_key.boxPk\n  h2_conf_key: -> Nacl.h2 @conf_key.boxPk\n  h2_next_key: -> Nacl.h2 @next_key.boxPk\n\n  keyByHash: (hash) ->\n    for s in @_roles\n      return @[s] if Nacl.h2(@[s].boxPk) is hash\n\n  isNextKeyHash: (hash) ->\n    @h2_next_key().equal hash\n\n  toStr: -> JSON.stringify(@).toBase64()\n  fromStr: (str) -> Utils.extend @, JSON.parse(str.fromBase64())\n\nmodule.exports = KeyRatchet\nwindow.KeyRatchet = KeyRatchet if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig           = require 'config'\nCryptoStorage = require 'crypto_storage'\nKeys          = require 'keys'\nNacl          = require 'nacl'\nUtils         = require 'utils'\n\n# Manages the public keys of correspondents\nclass KeyRing\n  # storage master key arrives from HW storage\n  constructor: (id, strMasterKey = null) ->\n    if strMasterKey\n      key = Keys.fromString strMasterKey\n      @storage = new CryptoStorage(key, id)\n\n    @storage = new CryptoStorage(null, id) unless @storage\n    @_ensureKeys()\n\n  # make sure we have all basic keys created\n  _ensureKeys: ->\n    @_loadCommKey()\n    @_loadGuestKeys()\n\n  _loadCommKey: ->\n    @comm_key = @getKey 'comm_key'\n    return if @comm_key\n    @comm_key = Nacl.makeKeyPair()\n    @saveKey 'comm_key', @comm_key\n\n  _loadGuestKeys: ->\n    @registry = @storage.get('guest_registry') or []\n    @guest_keys = {}\n    for r in @registry\n      @guest_keys[r] = @storage.get(\"#{r}.guest\")\n\n  commFromSeed: (seed) ->\n    @comm_key = Nacl.fromSeed Nacl.encode_utf8 seed\n    @storage.save('comm_key', @comm_key.toString())\n\n  commFromSecKey: (rawSecKey) ->\n    @comm_key = Nacl.fromSecretKey rawSecKey\n    @storage.save('comm_key', @comm_key.toString())\n\n  tagByHpk: (hpk) ->\n    for own k, v of @guest_keys\n      return k if hpk is Nacl.h2(v.fromBase64()).toBase64()\n\n  getMasterKey: ->\n    @storage.storage_key.key2str 'key' # to b64 string\n\n  getPubCommKey: ->\n    @comm_key.strPubKey()\n\n  saveKey: (tag,key) ->\n    @storage.save(tag,key.toString())\n    key\n\n  getKey: (tag) ->\n    k = @storage.get(tag)\n    if k then Keys.fromString k else null\n\n  _addRegistry: (strGuestTag) ->\n    return null unless strGuestTag\n    @registry.push(strGuestTag) unless @registry.indexOf(strGuestTag) >- 1\n\n  _saveNewGuest: (tag, pk) ->\n    return null unless tag and pk\n    @storage.save(\"guest[#{tag}]\", pk)\n    @storage.save('guest_registry', @registry)\n\n  _removeGuestRecord: (tag) ->\n    return null unless tag\n    @storage.remove(\"guest[#{tag}]\")\n    i = @registry.indexOf tag\n    if i >- 1\n      @registry.splice(i, 1)\n      @storage.save('guest_registry', @registry)\n\n  addGuest: (strGuestTag, b64_pk) ->\n    return null unless strGuestTag and b64_pk\n    b64_pk = b64_pk.trimLines()\n    @_addRegistry strGuestTag\n    @guest_keys[strGuestTag] = b64_pk\n    @_saveNewGuest(strGuestTag, b64_pk)\n\n  addTempGuest: (strGuestTag,strPubKey) ->\n    return null unless strGuestTag and strPubKey\n    strPubKey = strPubKey.trimLines()\n    @guest_keys[strGuestTag] = strPubKey\n    Utils.delay Config.RELAY_SESSION_TIMEOUT, =>\n      delete @guest_keys[strGuestTag]\n\n  removeGuest: (strGuestTag) ->\n    return null unless strGuestTag and @guest_keys[strGuestTag]\n    @guest_keys[strGuestTag] = null # erase the pointer just in case\n    delete @guest_keys[strGuestTag]\n    @_removeGuestRecord strGuestTag\n\n  getGuestKey: (strGuestTag) ->\n    return null unless strGuestTag and @guest_keys[strGuestTag]\n    new Keys\n      boxPk: @getGuestRecord(strGuestTag).fromBase64()\n\n  getGuestRecord: (strGuestTag) ->\n    return null unless strGuestTag and @guest_keys[strGuestTag]\n    @guest_keys[strGuestTag]\n\n  # have to call with overseerAuthorized as true for extra safety\n  selfDestruct: (overseerAuthorized) ->\n    return null unless overseerAuthorized\n    rcopy = @registry.slice()\n    @removeGuest g for g in rcopy\n    @storage.remove 'guest_registry'\n    @storage.remove 'comm_key'\n    @storage.selfDestruct(overseerAuthorized)\n\nmodule.exports = KeyRing\nwindow.KeyRing = KeyRing if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Keys represents a public/secret key pair object as generated by js-nacl\nUtils = require 'utils'\n\nclass Keys\n\n  # constructs an object from the hashKeys object passed to it, or creates an\n  # empty object.\n  constructor: (hashKeys) ->\n    return unless hashKeys\n    Utils.extend @, hashKeys\n\n  toString: ->\n    JSON.stringify @constructor.keys2str @\n\n  @fromString: (strKeys) ->\n    return null unless strKeys\n    @str2keys JSON.parse strKeys.trimLines()\n\n  key2str: (strName) ->\n    return null unless strName and @[strName]?\n    @[strName].toBase64()\n\n  strPubKey: ->\n    @boxPk.toBase64()\n\n  strSecKey: ->\n    @boxSk.toBase64()\n\n  equal: (k) ->\n    return false unless @strPubKey() is k.strPubKey()\n    return false if @boxSk? isnt k.boxSk?\n    return @strSecKey() is k.strSecKey() if @boxSk?\n    return true\n\n  # Convert obj with UInt8Array to obj with strings\n  @keys2str: (objKey) ->\n    r = new Keys()\n    for own k, v of objKey\n      r[k] = v.toBase64()\n    r\n\n  # Convert obj with strings to obj with UInt8Array\n  @str2keys: (strObj) ->\n    r = new Keys()\n    for own k, v of strObj\n      r[k] = v.fromBase64()\n    r\n\nmodule.exports  = Keys\nwindow.Keys = Keys if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig        = require 'config'\nKeyRing       = require 'keyring'\nNacl          = require 'nacl'\nUtils         = require 'utils'\n\n# Mailbox service to connect with the Zax relay service\nclass MailBox\n\n  # Creates a new client Mailbox that will represent an hpk mailbox on the\n  # relay. You can provide a friendly unique name to represent that Mailbox as\n  # an *identity*. That name should be unique locally, since it's used as a\n  # storage tag.\n\n  # If your client supports dedicated cryptographic storage, you can keep the\n  # master encryption key in that storage and provide it as strMasterKey.\n\n  # All Mailbox storage calls will be symmetrically encrypted with that key.\n  # Otherwise we will make a key for you, and save it in the same CryptoStorage\n  # as the rest of of the data.\n  constructor: (@identity, strMasterKey = null) ->\n    @keyRing = new KeyRing(@identity, strMasterKey)\n    @session_keys = {}\n    @session_relay = {}\n    @session_timeout = {}\n\n  # You can create a Mailbox where the secret identity key is derived from a\n  # well-known seed.\n  @fromSeed: (seed, id = seed, strMasterKey = null) ->\n    mbx = new MailBox(id, strMasterKey)\n    mbx.keyRing.commFromSeed(id)\n    mbx._hpk = null\n    return mbx\n\n  # You can also create a Mailbox if you already know the secret identity key\n  @fromSecKey: (secKey, id, strMasterKey = null) ->\n    mbx = new MailBox(id, strMasterKey)\n    mbx.keyRing.commFromSecKey(secKey)\n    mbx._hpk = null\n    return mbx\n\n  # --- Mailbox keys ---\n  # This is the HPK (hash of the public key) of your mailbox. This is what Zax\n  # Relays use as the universal address of your mailbox.\n  hpk: ->\n    return @_hpk if @_hpk\n    @_hpk = Nacl.h2(@keyRing.comm_key.boxPk)\n\n  # This is your public identity and default communication key. Your\n  # correspondents can know it, whereas Relays do not need it (other than\n  # temporarily for internal use during the ownership proof)\n  getPubCommKey: ->\n    @keyRing.getPubCommKey()\n\n  # Each session with each Zax Relay creates its own temporary session keys\n  createSessionKey: (sess_id) ->\n    throw new Error('createSessionKey - no sess_id') unless sess_id\n    return @session_keys[sess_id] if @session_keys[sess_id]?\n    @session_keys[sess_id] = Nacl.makeKeyPair()\n\n    # Remove key material after it expires on the relay\n    @session_timeout[sess_id] = Utils.delay Config.RELAY_SESSION_TIMEOUT, =>\n      @session_keys[sess_id] = null\n      delete @session_keys[sess_id]\n\n      @session_timeout[sess_id] = null\n      delete @session_timeout[sess_id]\n\n      @session_relay[sess_id] = null\n      delete @session_relay[sess_id]\n\n    return @session_keys[sess_id]\n\n  # --- Low level encoding/decoding ---\n\n  rawEncodeMessage: (msg, pkTo, skFrom) ->\n    throw new Error('rawEncodeMessage: missing params') unless msg? and pkTo? and skFrom?\n    nonce = @_make_nonce()\n    return r =\n      nonce: nonce.toBase64()\n      ctext: Nacl.use().crypto_box(\n        @_parseData(msg)\n        nonce\n        pkTo\n        skFrom).toBase64()\n\n  rawDecodeMessage: (nonce, ctext, pkFrom, skTo) ->\n    throw new Error('rawEncodeMessage: missing params') unless nonce? and ctext? and pkFrom? and skTo?\n    NC = Nacl.use()\n    JSON.parse NC.decode_utf8 NC.crypto_box_open(ctext, nonce, pkFrom, skTo)\n\n  # Encodes a free-form object *msg* to the guest key of a guest already\n  # added to our keyring. If the session flag is set, we will look for keys in\n  # temporary, not the persistent collection of session keys. skTag lets you\n  # specifiy the secret key in a key ring\n  encodeMessage: (guest, msg, session = false, skTag = null) ->\n    throw new Error('encodeMessage: missing params') unless guest? and msg?\n    throw new Error(\"encodeMessage: don't know guest #{guest}\") unless (gpk = @_gPk guest)?\n    sk = @_getSecretKey guest, session, skTag\n    @rawEncodeMessage msg, gpk, sk\n\n  # Decodes a ciphertext from a guest key already in our keyring with this\n  # nonce. If session flag is set, looks for keys in temporary, not the\n  # persistent collection of session keys. skTag (optional) lets you specify\n  # the secret key in a key ring\n  decodeMessage: (guest, nonce, ctext, session = false, skTag = null) ->\n    throw new Error('decodeMessage: missing params') unless guest? and nonce? and ctext?\n    throw new Error(\"decodeMessage: don't know guest #{guest}\") unless (gpk = @_gPk guest)?\n    sk = @_getSecretKey guest, session, skTag\n    @rawDecodeMessage nonce.fromBase64(), ctext.fromBase64(), gpk, sk\n\n  # Establishes a session, exchanges temp keys and proves our ownership of this\n  # Mailbox to this specific relay. This is the first function to start\n  # communications with any relay.\n  connectToRelay: (relay) ->\n    relay.openConnection().then =>\n      relay.connectMailbox(@).then =>\n        @lastRelay = relay\n\n  # --- Initial communications ---\n  # If we are not connected to a relay, we can still send a message (free form\n  # object) to a specific guest in our keyring. This call will first establish\n  # a connection to a relay and then send the first message via that relay.\n  sendToVia: (guest, relay, msg) ->\n    @connectToRelay(relay).then =>\n      @relay_send(guest, msg, relay)\n\n  # If we are not connected to a relay, we can still get pending messages for\n  # us from that relay. This call will first establish a connection to a relay\n  # and download messages. @lastDownload will be populated with an array of\n  # messages and download meta-data about those messages.\n  getRelayMessages: (relay) ->\n    @connectToRelay(relay).then =>\n      @relay_messages()\n\n  # --- Established communication functions ---\n  # Once a connection with a relay is established there is no need to create\n  # new sessions. These 4 functions allow us to issue all 4 relay commands\n  # using previously established connections to a relay stored in @lastRelay\n\n  # Gets pending messages count and stores it in @count\n  relay_count: ->\n    throw new Error('relay_count - no open relay') unless @lastRelay\n    @lastRelay.count(@).then =>\n      @count = parseInt @lastRelay.result\n\n  # Sends a free-form object to a guest whose keys we already have in our\n  # keyring via @lastRelay\n  relay_send: (guest, msg) ->\n    throw new Error('mbx: relay_send - no open relay') unless @lastRelay\n    enc_msg = @encodeMessage(guest, msg)\n    @lastMsg = enc_msg\n    @lastRelay.upload(@,Nacl.h2(@_gPk guest), enc_msg)\n\n  # Downloads pending relay messages into @lastDownload\n  relay_messages: ->\n    throw new Error('relay_messages - no open relay') unless @lastRelay\n    @lastRelay.download(@).then =>\n      @lastDownload = []\n      for emsg in @lastRelay.result\n        if (tag = @keyRing.tagByHpk emsg.from)\n          emsg['fromTag'] = tag\n          emsg['msg'] = @decodeMessage tag, emsg.nonce, emsg.data\n          delete emsg.data if emsg['msg']?\n        @lastDownload.push emsg\n\n  # If @downloadMeta has been populated by previous calls, this maps the list\n  # of nonces of current messages on the relay. Since nonces are forced to be\n  # unique, they are used as global message ids for a given mailbox\n  relay_nonce_list: ->\n    throw new Error('relay_nonce_list - no metadata') unless @lastDownload\n    Utils.map @lastDownload, (i) -> i.nonce\n\n  # Deletes messages from the relay given a list of message nonces.\n  relay_delete: (list) ->\n    throw new Error('relay_delete - no open relay') unless @lastRelay\n    @lastRelay.delete(@, list)\n\n  # Calls @relay_delete @relay_nonce_list: deletes up to the first 100 messages\n  # from the relay for a given mailbox.\n  clean: (r) ->\n    @getRelayMessages(r).then =>\n      @relay_delete(@relay_nonce_list())\n\n  # Deletes a Mailbox and all its data from local CryptoStorage. This is a very\n  # destructive operation, use with caution - it will also delete the Mailbox\n  # keyring along with all stored public keys. To restore that information, you\n  # will need to do another key exchange with all the guests on your keyring.\n  selfDestruct: (overseerAuthorized) ->\n    return null unless overseerAuthorized\n    @keyRing.selfDestruct(overseerAuthorized)\n\n  # --- Protected helpers ---\n\n  # Get a guest key pair by id\n  _gKey: (strId) ->\n    return null unless strId\n    @keyRing.getGuestKey strId\n\n  # Get a guest public key by id\n  _gPk: (strId) ->\n    return null unless strId\n    @_gKey(strId)?.boxPk\n\n  _gHpk: (strId) ->\n    return null unless strId\n    Nacl.h2 @_gPk strId\n\n  _getSecretKey: (guest, session, skTag) ->\n    unless skTag\n      return if session then @session_keys[guest].boxSk else @keyRing.comm_key.boxSk\n    else\n      # In this case we use the key ring to store temp secret keys\n      return @_gPk skTag\n\n  # Converts any object into Uint8Array\n  _parseData: (data) ->\n    return data if Utils.type(data) is 'Uint8Array'\n    Nacl.use().encode_utf8 JSON.stringify data\n\n  # Makes a timestamp nonce that a relay expects for any crypto operations.\n  # timestamp is the first 8 bytes, the rest is random\n  _make_nonce: (time = parseInt(Date.now() / 1000)) ->\n    nonce = Nacl.use().crypto_box_random_nonce()\n    throw new Error('RNG failed, try again?') unless nonce? and nonce.length is 24\n\n    # split timestamp integer as an array of bytes\n    bytes = Utils.itoa time\n\n    # copy the timestamp into the first 8 bytes of nonce\n    nonce[i] = 0 for i in [0..7]\n    nonce[8 - bytes.length + i] = bytes[i] for i in [0..(bytes.length - 1)]\n    return nonce\n\nmodule.exports = MailBox\nwindow.MailBox = MailBox if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nmodule.exports =\n  Utils:                require 'utils'\n  Mixins:               require 'mixins'\n  Nacl:                 require 'nacl'\n  Keys:                 require 'keys'\n  SimpleStorageDriver:  require 'test_driver'\n  CryptoStorage:        require 'crypto_storage'\n  KeyRing:              require 'keyring'\n  MailBox:              require 'mailbox'\n  Relay:                require 'relay'\n  RachetBox:            require 'rachetbox'\n\n  # storeImpl required API:\n  # - get(key: String): Object\n  # - set(key: String, value: Object): Void\n  # - remove(key: String): Void\n\n  startStorageSystem: (storeImpl) ->\n    @CryptoStorage.startStorageSystem storeImpl\n\n  # ajaxImpl required API:\n  # - ajax( url: String, data: String ): Promise\n  #   Promise: resolved with text/plain response\n  #   method: POST\n  #   contentType: 'text/plain'\n  #   dataType: 'text'\n\n  setAjaxImpl: (ajaxImpl)->\n    @Utils.setAjaxImpl ajaxImpl\n\n# export glow in browser\nif window\n  window.glow = module.exports\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Extends several low level data types with utility functions\nUtils = require 'utils'\n\n# --- Extending functions of String class ---\nUtils.include String,\n  # string to an array of byte values\n  toCodeArray: ->\n    (s.charCodeAt() for s in @)\n\n  # UTF8 conversions\n  toUTF8: ->\n    unescape encodeURIComponent @\n  fromUTF8: ->\n    decodeURIComponent escape @\n\n  # Each char code to a Uint8Array\n  toUint8Array: ->\n    new Uint8Array @.toUTF8().toCodeArray()\n\n  toUint8ArrayRaw: ->\n    new Uint8Array @.toCodeArray()\n\n  # From base64 string to Uint8Array\n  fromBase64: ->\n    new Uint8Array (atob @).toCodeArray()\n\n  # Trim line feed chars\n  trimLines: ->\n    @.replace('\\r\\n', '').replace('\\n', '').replace('\\r', '')\n# ---\n\n# --- Extending functions of Array , Uint8Array , Uint16Array classes ---\nfor C in [Array , Uint8Array , Uint16Array]\n  Utils.include C,\n    # From JS arrays of char codes to a string\n    # UTF16 chars above ASCII will generate codes above 255\n    fromCharCodes: ->\n      (String.fromCharCode(c) for c in @).join('')\n\n    # From array of char codes to a base64 string\n    toBase64: ->\n      btoa @fromCharCodes()\n\n    xorWith: (a) ->\n      return null unless @.length is a.length\n      new Uint8Array(c ^ a[i] for c, i in @)\n\n    equal: (a2) ->\n      return false if @.length != a2.length\n      for v,i in @\n        return false if v != a2[i]\n      return true\n\nUtils.include Uint8Array,\n  # creates a new Uint8Array that is the concat of self & anotherArray\n  concat: (anotherArray) ->\n    tmp = new Uint8Array(@byteLength + anotherArray.byteLength)\n    tmp.set(new Uint8Array(@), 0)\n    tmp.set(anotherArray, @byteLength)\n    return tmp\n\n  # .fill() for setting the whole array to a particular value\n  fill_with: (val) ->\n    for v, i in @\n      @[i] = val\n    @ # allows call chaining\n# --- end mixins ---\n\nmodule.exports = {} # Nothing to export\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# A light wrapper around the js-nacl library\n\n# If we are running in the browser, then nacl_factory will be defined by\n# including the nacl_factory.js lib before including glow. If we are on node,\n# then require 'js-nacl' will include nacl_factory appropriately\nif nacl_factory?\n  js_nacl = nacl_factory\nelse\n  js_nacl  = require 'js-nacl' # https://github.com/tonyg/js-nacl\n\nKeys          = require 'keys'\nUtils         = require 'utils'\n\nclass Nacl\n  @HEAP_SIZE:     2 ** 23\n  @_instance:     null\n  @_unloadTimer:  null\n\n  # whenever we call use, we're accessing the js-nacl lib for a function call\n  # if we haven't used any js-nacl lib function calls in 15 seconds, then it\n  # unloads via the unload call\n  @use: ->\n    # timer unloads 8mb heap 15 sec after last use\n    clearTimeout @_unloadTimer if @_unloadTimer\n    @_unloadTimer = setTimeout((-> Nacl.unload()), 15 * 1000)\n\n    unless window.__nacl_instance   # Global instance to avoid duplicating heap\n      window.__nacl_instance = js_nacl.instantiate(@HEAP_SIZE) # 8mb heap\n    window.__nacl_instance\n\n  @unload: ->\n    # Nacl hasn't been used in 15 seconds, unload it and free the heap\n    @_unloadTimer = null\n    window.__nacl_instance = null\n    delete window.__nacl_instance\n\n  @makeSecretKey: ->\n    new Keys(\n      key: @use().random_bytes(@use().crypto_secretbox_KEYBYTES)\n    )\n\n  @random: (size = 32) ->\n    @use().random_bytes(size)\n\n  @makeKeyPair: ->\n    new Keys @use().crypto_box_keypair()\n\n  @fromSecretKey: (raw_sk) ->\n    new Keys @use().crypto_box_keypair_from_raw_sk(raw_sk)\n\n  @fromSeed: (seed) ->\n    new Keys @use().crypto_box_keypair_from_seed(seed)\n\n  @sha256: (data) ->\n    @use().crypto_hash_sha256 data\n\n  @to_hex: (data) ->\n    @use().to_hex data\n\n  @from_hex: (data) ->\n    @use().from_hex data\n\n  @encode_utf8: (data) ->\n    @use().encode_utf8 data\n\n  @decode_utf8: (data) ->\n    @use().decode_utf8 data\n\n  # h2(m) = sha256(sha256(32x0 + m))\n  # Zero out initial sha256 block, and double hash 0-padded message\n  # http://cs.nyu.edu/~dodis/ps/h-of-h.pdf\n  @h2: (str) ->\n    str = str.toUint8ArrayRaw() if Utils.type(str) is 'String'\n    tmp = new Uint8Array(32 + str.length)\n    tmp.fill_with 0\n    tmp.set(str, 32)\n    @sha256 @sha256 tmp\n\n  @h2_64: (b64str) ->\n    Nacl.h2(b64str.fromBase64()).toBase64()\n\nmodule.exports = Nacl\nwindow.Nacl = Nacl if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\nUtils       = require 'utils'\nNacl        = require 'nacl'\nKeys        = require 'keys'\nKeyRing     = require 'keyring'\nKeyRatchet  = require 'keyratchet'\nMailbox     = require 'mailbox'\n\nclass RatchetBox extends Mailbox\n\n  _loadRatchets: (guest) ->\n    # every guest will have a next confirmed key that we can reliably use, and\n    # a next key we are awaiting confirmation for. In local storage we will\n    # reference guests by the usual guest hpk=h2(pk)\n    gHpk = @_gHpk(guest).toBase64()\n\n    # if we have confirmed ratchet key we use it, otherwise\n    # fallback to our @comm_key\n    @kr_local = new KeyRatchet(\"local_#{gHpk}_for_#{@hpk().toBase64()}\",\n      @keyRing, @keyRing.comm_key)\n\n    @kr_guest = new KeyRatchet(\"guest_#{gHpk}_for_#{@hpk().toBase64()}\",\n      @keyRing, @keyRing.getGuestKey guest)\n\n  relay_send: (guest, m) ->\n    throw new Error('rbx: relay_send - no open relay') unless @lastRelay\n    throw new Error('rbx: relay_send - missing params') unless guest and m\n\n    # now we have 2 keys - the next key to send to a guest, and the last\n    # confirmed key we can use for encryption - it may be the comm identity key\n    # if we are at the start of a ratchet\n    @_loadRatchets(guest)\n\n    # Save original message and include ratchet information along\n    msg = {org_msg: m}\n    # Add next key to org_msg unless its a key confirmation message\n    msg['next_key'] = @kr_local.next_key.strPubKey() unless m.got_key?\n\n    # Full message or just a 'got_key' confirmation?\n    if not m.got_key?\n      # Use the confirmed ratchet key we got from the guest, or it will default\n      # to her public comm_key\n      enc_msg = @rawEncodeMessage(msg, @kr_guest.conf_key.boxPk, @kr_local.conf_key.boxSk)\n      @lastMsg = enc_msg\n    else\n      # sending key confirmation using last key\n      enc_msg = @rawEncodeMessage(msg, @kr_guest.last_key.boxPk, @kr_local.conf_key.boxSk)\n\n    # console.log \"sent #{@getPubCommKey()} => #{@_gPk(guest).toBase64()} with #{@kr_guest.conf_key.boxPk.toBase64()} | nonce = #{enc_msg.nonce}\"\n    @lastRelay.upload(@,Nacl.h2(@_gPk guest), enc_msg)\n\n  _try_keypair: (nonce, ctext, pk, sk) ->\n    try\n      return @rawDecodeMessage nonce.fromBase64(),\n        ctext.fromBase64(), pk, sk\n    catch e\n      return null\n\n  decodeMessage: (guest, nonce, ctext, session = false, skTag = null) ->\n    return super(guest, nonce, ctext, session, skTag) if session\n    throw new Error('decodeMessage: missing params') unless guest? and nonce? and ctext?\n    @_loadRatchets(guest)\n    # console.log \"receiving from #{@_gPk(guest).toBase64()} => #{@getPubCommKey()} with #{@kr_guest.conf_key.boxPk.toBase64()}\"\n\n    key_pairs = [\n      # defult: confirmed local and guest\n      [@kr_guest.conf_key.boxPk, @kr_local.conf_key.boxSk],\n\n      # Guest might not have switched to latest key yet\n      [@kr_guest.last_key.boxPk, @kr_local.last_key.boxSk],\n      [@kr_guest.conf_key.boxPk, @kr_local.last_key.boxSk],\n      [@kr_guest.last_key.boxPk, @kr_local.conf_key.boxSk]]\n\n    for kp, i in key_pairs\n      # console.log \"key pair #{i}\" if i>0\n      r = @_try_keypair nonce, ctext, kp[0], kp[1]\n      return r if r?\n\n    console.log 'RatchetBox decryption failed: message from unknown guest or ratchet out of sync'\n    # TODO: Add ratchet key reset protocol for this guest here (send \"reset\" command)\n    return null\n\n  relay_messages: ->\n    # First download pending messages\n    super().then =>\n      # Now, lets process ratchet-related information in these messages\n      send_confs = []\n\n      for m in @lastDownload\n        continue unless m.fromTag\n\n        @_loadRatchets(m.fromTag)\n\n        # If guests send use their next_key for ratchet\n        if m.msg?.next_key?\n          # save next_key for that guest\n          if @kr_guest.confKey new Keys {boxPk: m.msg.next_key.fromBase64()}\n            # send guest confirmation that we got it\n            send_confs.push\n              toTag: m.fromTag\n              key: m.msg.next_key\n              msg:\n                got_key: Nacl.h2_64(m.msg.next_key)\n\n        # If we got confirmation that our key is received\n        # we should move it to next_key for that guest\n\n        if m.msg?.org_msg?.got_key?\n          m.msg = m.msg.org_msg\n          # do we saved that key locally?\n          if @kr_local.isNextKeyHash m.msg.got_key.fromBase64()\n            @kr_local.pushKey Nacl.makeKeyPair()\n          m.msg = null\n          # we processed it, nothing else to do with this message\n\n        # restore usual @lastDownload structure\n        if m.msg?\n          m.msg = m.msg.org_msg\n\n      # now we can send confirmations to guests that we got their key. Note\n      # that got_key is a service message that wont advance the ratchet\n      sendNext = =>\n        if send_confs.length > 0\n          sc = send_confs.shift()\n          @relay_send(sc.toTag,sc.msg).then =>\n            sendNext()\n      sendNext()\n\nmodule.exports = RatchetBox\nwindow.RatchetBox = RatchetBox if window.__CRYPTO_DEBUG\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\nConfig = require 'config'\nKeys = require 'keys'\nNacl = require 'nacl'\nUtils = require 'utils'\n\nclass Relay\n  # skip url for offline testing\n  constructor: (@url = null) ->\n    @_reset_state() # until a succesful handshake\n    @lastError = null\n\n    # plugins can add their own commands to specific relays\n    # TODO: why not re-use what is in config?\n    @RELAY_COMMANDS = ['count', 'upload', 'download', 'delete']\n\n  openConnection: ->\n    # exchange tokens with a relay and get a temp session key for this relay\n    @getServerToken().then =>\n      @getServerKey()\n\n  getServerToken: ->\n    throw new Error('getServerToken - no url') unless @url\n    @lastError = null\n\n    # Generate a client_token. It will be used as a temp mask for the public\n    # key exchange with the relay.\n    @client_token = Nacl.random(Config.RELAY_TOKEN_LEN) unless @client_token\n\n    # sanity check the client token\n    if @client_token and @client_token.length isnt Config.RELAY_TOKEN_LEN\n      throw new Error(\"Token must be #{Config.RELAY_TOKEN_LEN} bytes\")\n\n    @_ajax('start_session', @client_token.toBase64()).then (data)=>\n      # relay responds with its own counter token. Until session is\n      # established these 2 tokens are handshake id.\n      lines = @_processData data\n      @relay_token = lines[0].fromBase64()\n      @diff = if lines.length == 2 then parseInt(lines[1]) else 0\n      @h2_relay_token = Nacl.h2(@relay_token)\n      @_schedule_expire_session Config.RELAY_TOKEN_TIMEOUT\n      # Will remove after token expires on relay\n      if @diff > 4\n        console.log \"Relay #{@url} requested difficulty #{@diff}. Session handshake may take longer.\"\n      if @diff > 16\n        console.log \"Attempting handshake at difficulty #{@diff}! This may take a while\"\n\n  getServerKey: ->\n    throw new Error('getServerKey - missing params') unless @url and @client_token and @relay_token\n    @lastError = null\n\n    # After the client_token is sent to reley, we use only the h2() of it\n    @h2_client_token = Nacl.h2(@client_token).toBase64()\n\n    handshake = @client_token.concat @relay_token\n    if @diff is 0\n      sess_hs = Nacl.h2(handshake).toBase64()\n    else\n      nonce = Nacl.random 32\n      until Utils.arrayZeroBits(Nacl.h2(handshake.concat nonce), @diff)\n        nonce = Nacl.random 32\n      sess_hs = nonce.toBase64()\n\n    # We confirm handshake by sending back h2(client_token, relay_token)\n    @_ajax('verify_session', \"#{@h2_client_token}\\r\\n#{sess_hs}\\r\\n\").then (d)=>\n      # relay gives us back temp session key\n      # masked by client_token we started with\n      relay_pk = d.fromBase64()\n      @relay_key = new Keys { boxPk: relay_pk }\n      @online = true\n      # @_schedule_expire_session Config.RELAY_SESSION_TIMEOUT\n      # Will remove after the key expires on this relay\n\n  connectMailbox: (mbx) ->\n    throw new Error('connectMailbox - missing params') unless mbx? and @online and @relay_key? and @url?\n    @lastError = null\n\n    relay_id = \"relay_#{@url}\"\n    client_temp = mbx.createSessionKey(relay_id).boxPk\n    mbx.keyRing.addTempGuest relay_id, @relay_key.strPubKey()\n    delete @relay_key # now it belongs to the mailbox\n\n    masked_client_temp_pk = client_temp.toBase64()\n\n    # Alice creates a 32 byte session signature as\n    # h₂(a_temp_pk,relay_token, client_token)\n    sign = client_temp.concat(@relay_token).concat(@client_token)\n    h2_sign = Nacl.h2(sign)\n\n    inner = mbx.encodeMessage relay_id, h2_sign\n    inner['pub_key'] = mbx.keyRing.getPubCommKey()\n    outer = mbx.encodeMessage \"relay_#{@url}\", inner, true\n\n    @_ajax('prove',\n      \"#{@h2_client_token}\\r\\n\" +\n      \"#{masked_client_temp_pk}\\r\\n\" +\n      \"#{outer.nonce}\\r\\n\" +\n      \"#{outer.ctext}\")\n    .then (d)=>\n      # console.log \"#{@url} => #{d} messages\"\n\n  runCmd: (cmd, mbx, params = null) ->\n    throw new Error('runCmd - missing params') unless cmd? and mbx?\n    unless cmd in @RELAY_COMMANDS\n      throw new Error(\"Relay #{@url} doesn't support #{cmd}\")\n    data =\n      cmd: cmd\n    data = Utils.extend data, params if params\n    message = mbx.encodeMessage \"relay_#{@url}\", data, true\n\n    @_ajax('command',\n      \"#{mbx.hpk().toBase64()}\\r\\n\" +\n      \"#{message.nonce}\\r\\n\" +\n      \"#{message.ctext}\")\n    .then (d)=>\n      return if cmd in ['upload'] # no data in the response\n      throw new Error(\"#{@url} - #{cmd} error\") unless d?\n      if cmd in ['count','download']\n        @result = @_processResponse(d, mbx, cmd)\n      else\n        @result = JSON.parse d\n\n  _processResponse: (d, mbx, cmd) ->\n    datain = @_processData d\n    unless datain.length is 2\n      throw new Error(\"#{@url} - #{cmd}: Bad response\")\n    nonce = datain[0]\n    ctext = datain[1]\n    mbx.decodeMessage(\"relay_#{@url}\", nonce, ctext, true)\n\n  _processData: (d) ->\n    datain = d.split('\\r\\n')\n    datain = d.split('\\n') unless datain.length >= 2\n    return datain\n\n  # Command wrappers\n\n  count: (mbx) ->\n    @runCmd('count', mbx)\n\n  upload: (mbx, toHpk, payload) ->\n    @runCmd('upload', mbx,\n      to: toHpk.toBase64()\n      payload: payload)\n\n  download: (mbx) ->\n    @runCmd('download', mbx)\n\n  delete: (mbx,nonce_list) ->\n    @runCmd('delete', mbx,\n      payload: nonce_list)\n\n  # Deletes all local session tokens\n  # Our information has expired on the relay and a new session has to be\n  # established with all new tokens\n  _reset_state: ->\n    @client_token = null\n    @online = false\n    @relay_token = null\n    @relay_key = null\n    @client_token_expiration = null\n\n  _schedule_expire_session: (tout) ->\n    clearTimeout(@client_token_expiration) if @client_token_expiration\n    @client_token_expiration = setTimeout( =>\n      @_reset_state()\n    , tout) # Token will expire on the relay\n\n  _ajax: (cmd,data) =>\n    Utils.ajax \"#{@url}/#{cmd}\", data\n    # TODO update for various implementations or make them provide it extra:\n    # .catch e\n    #   console.error @lastError = \"#{type}/#{xhr.status} - #{error}\"\n    #   @online = false\n    #   throw e\n\nmodule.exports = Relay\nwindow.Relay = Relay if window.__CRYPTO_DEBUG\n","# A test driver - not to be used in production for permanent key storage\nclass SimpleTestDriver\n\n  _state: null\n  _key_tag: (key) -> \"#{@_root_tag}.#{key}\"\n\n  constructor: (root = 'storage.', sourceData = null) ->\n    @_root_tag = \"__glow.#{root}\" # + root\n    @_load(sourceData)\n\n  get: (key) ->\n    @_load() if not @_state\n    if @_state[key] then @_state[key] else JSON.parse localStorage.getItem @_key_tag key\n\n  set: (key, value) ->\n    @_load() if not @_state\n    @_state[key] = value\n    localStorage.setItem @_key_tag(key), JSON.stringify value\n    @_persist()\n\n  remove: (key) ->\n    @_load() if not @_state\n    delete @_state[key]\n    localStorage.removeItem @_key_tag key\n    @_persist()\n\n  _persist: () ->\n    # Permanently save the state object in a real driver\n    # _state.save()\n\n  _load: (sourceData = null) ->\n    # Load from persitent app storage in the real driver\n    @_state = if sourceData then sourceData else {}\n    console.log 'INFO: SimpleTestDriver uses localStorage and should not be\n      used in production for permanent key storage.'\n\nmodule.exports = SimpleTestDriver\n","# Copyright (c) 2015 Vault12, Inc.\n# MIT License https://opensource.org/licenses/MIT\n\n# Low level basic utilities and mixins\n# zepto = require 'zepto' # minimalist js library. similar syntax to jQuery\nConfig = require 'config'\n\nclass Utils\n  # --- Mixins ---\n  # Wraps http://zeptojs.com/#$.extend - provided so that you can swap\n  # zepto for another js library that doesn't have the same extend behavior.\n  # Uses default impl if $.extend not available.\n  @extend = (target, source) ->\n    if $?.extend\n      $.extend target, source\n    else\n      for key, val of source\n        if source[key] != undefined\n          target[key] = source[key]\n      target\n\n  @map = (array, func) ->\n    if $?.map\n      $?.map array, func\n    else\n      # http://caniuse.com/#search=map\n      Array.prototype.map.apply array, [ func ]\n\n  # convenience function for extending an object by class\n  @include = (klass, mixin) ->\n    @extend klass.prototype, mixin\n\n  # extracts just the name portion as a string of an object's class\n  @type = (obj) ->\n    return 'undefined' if obj is undefined\n    return 'null' if obj is null\n    Object.prototype.toString.call(obj)\n      .replace('[', '').replace(']', '').split(' ')[1]\n\n  @ajaxImpl: null\n\n  @setAjaxImpl: (ajaxImpl)->\n    @ajaxImpl = ajaxImpl\n\n  # wraps http://zeptojs.com/#$.ajax - provided so that if you can swap\n  # zepto for another js library that doesn't have the same ajax behavior\n  @ajax: (url, data) ->\n\n    # no ajax impl set?\n    if @ajaxImpl == null\n      # try to auto-set some default implementations here, if present\n\n      # set the impl to q-xhr if present\n      if Q?.xhr\n        # console.log 'default ajax impl: setting to q-xhr'\n        @setAjaxImpl (url, data)->\n          Q.xhr\n            method: 'POST'\n            url: url\n            headers:\n              'Accept': 'text/plain'\n              'Content-Type': 'text/plain'\n            data: data\n            responseType: 'text'\n            timeout: Config.RELAY_AJAX_TIMEOUT\n            disableUploadProgress: true # https://github.com/nathanboktae/q-xhr/issues/12\n          .then (response)->\n            response.data\n\n      # try Zepto with Promises (will not catch exceptions in .then/.done)\n      else if $?.ajax && $?.Deferred\n        console.log 'default ajax impl: setting to zepto with promises'\n        @setAjaxImpl (url, data)->\n          $.ajax\n            url: url\n            type: 'POST'\n            dataType: 'text'\n            timeout: Config.RELAY_AJAX_TIMEOUT\n            context: @\n            error: console.log\n            contentType: 'text/plain'\n            data: data\n\n      else\n        throw new Error 'ajax implementation not set; use q-xhr or $http'\n\n    # invoke ajax\n    @ajaxImpl url, data\n\n  # calls func after the specified delay in milliseconds\n  @delay: (milliseconds, func) ->\n    setTimeout(func, milliseconds)\n\n  # splits an integer into an array of bytes\n  @itoa: (n) ->\n    return new Uint8Array(0 for i in [0..7]) if n <= 0\n    [floor, pw, lg] = [Math.floor, Math.pow, Math.log] # aliases\n\n    top = floor lg(n) / lg(256)\n    new Uint8Array( floor(n / pw(256, i)) % 256 for i in [top..0] )\n\n  # returns true if the rightmost n bits of a byte are 0\n  @firstZeroBits: (byte, n) ->\n    byte is ((byte >> n) << n)\n\n  # check whether the rightmost difficulty bits of an Uint8Array are 0, where\n  # the lowest indexes of the array represent those rightmost bits. Thus if\n  # the difficulty is 17, then arr[0] and arr[1] should be 0, as should the\n  # rightmost bit of arr[2]. This is used for our difficulty settings in Zax to\n  # reduce burden on a busy server by ensuring clients have to do some\n  # additional work during the session handshake\n  @arrayZeroBits: (arr, diff) ->\n    rmd = diff\n    for i in [0..(1 + diff / 8)]\n      a = arr[i]\n      return true if rmd <= 0\n      if rmd > 8\n        rmd -= 8\n        return false if a > 0\n      else\n        return @firstZeroBits(a, rmd)\n    return false\n\n  # TODO: add some comments on these replace calls\n  @logStack: (err) ->\n    err = new Error('stackLog') unless err\n    s = err.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n    .replace(/^\\s+at\\s+/gm, '')\n    .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@')\n    .split('\\n')\n    console.log \"#{i}: #{sl}\" for sl,i in s\n\nmodule.exports = Utils\nwindow.Utils = Utils if window.__CRYPTO_DEBUG\n"],"sourceRoot":"/source/"}